<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>test</title>
      <link href="/2021/10/02/test/"/>
      <url>/2021/10/02/test/</url>
      
        <content type="html"><![CDATA[<p>hahahaha</p><p>haha</p><p>jahaha</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Chapter1 We are introduced to the narrotor, a pilot, and his ideas about grown-ups</title>
      <link href="/2021/10/02/Books/English/The%20Little%20Prince/Chapter2/"/>
      <url>/2021/10/02/Books/English/The%20Little%20Prince/Chapter2/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
        <tags>
            
            <tag> Book </tag>
            
            <tag> English </tag>
            
            <tag> The Little Prince </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Chapter1 We are introduced to the narrotor, a pilot, and his ideas about grown-ups</title>
      <link href="/2021/10/02/Books/English/The%20Little%20Prince/Chapter1/"/>
      <url>/2021/10/02/Books/English/The%20Little%20Prince/Chapter1/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
        <tags>
            
            <tag> Book </tag>
            
            <tag> English </tag>
            
            <tag> The Little Prince </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Chapter1</title>
      <link href="/2021/10/02/Books/English/Animal%20Farm/Chapter1/"/>
      <url>/2021/10/02/Books/English/Animal%20Farm/Chapter1/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
        <tags>
            
            <tag> Book </tag>
            
            <tag> English </tag>
            
            <tag> Animal Farm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2021/10/02/hello-world/"/>
      <url>/2021/10/02/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo generate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo deploy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Node-RED 系列（11）-- how to copy nodes and flows</title>
      <link href="/2020/04/29/Node-RED/Node-RED-11-Copy-nodes-and-flows/"/>
      <url>/2020/04/29/Node-RED/Node-RED-11-Copy-nodes-and-flows/</url>
      
        <content type="html"><![CDATA[<p>There a several ways that you can copy nodes and flows between flows.</p><p>They are:</p><ul><li>Select Copy and Paste</li><li>Export and Import Clipboard</li><li>Save to and Retrieve from the local library</li></ul><h2 id="Select-Copy-and-Paste"><a href="#Select-Copy-and-Paste" class="headerlink" title="Select Copy and Paste"></a>Select Copy and Paste</h2><p>Just select the nodes that you want to copy then <code>control + C</code> and <code>control + V</code>.<br><img src="/2020/04/29/Node-RED/Node-RED-11-Copy-nodes-and-flows/11-1.gif" alt="11-1.gif"></p><h2 id="Export-and-Import-Clipboard"><a href="#Export-and-Import-Clipboard" class="headerlink" title="Export and Import Clipboard"></a>Export and Import Clipboard</h2><p>Just select the nodes that you want to export and click the export and then open a text to store the flow on the clipboard with the flow as its file extension. After this, I can take that text document and I can install it on another node-red installation on another computer. It’s a very good way of exporting your flows to other computers to other users.<br><img src="/2020/04/29/Node-RED/Node-RED-11-Copy-nodes-and-flows/11-2.gif" alt="11-2.gif"></p><p>To get a flow that’s been exported into your node-red flow, all you do is use the opposite which is the import. Go to import and import from the clipboard. Open the text document then copy the stored flow to the clipboard and import.<br><img src="/2020/04/29/Node-RED/Node-RED-11-Copy-nodes-and-flows/11-3.gif" alt="11-3.gif"></p><h2 id="Save-to-and-Retrieve-from-the-local-library"><a href="#Save-to-and-Retrieve-from-the-local-library" class="headerlink" title="Save to and Retrieve from the local library"></a>Save to and Retrieve from the local library</h2><p>The third method is by using the library. Using the library you can actually copy flows and you can also copy individual functions. We’re going to look at doing both. </p><p>Just select the nodes and then go to export and this time I’m exporting into the library not clipboard. And I need to give it a name, I can also give it a subdirectory. By default, they’re stored in the library folder. The flows are stored in a subfolder called flows and the functions in a subfolder called functions.</p><p>The main difference between exporting it to the library or exporting it to the clipboard and then to a text file is the library used when you want to reuse the flows and functions on the same machine. The clipboard and the file issues when you actually want to transfer the two flows to a different machine or a different user.</p><p><em>flows</em><br><img src="/2020/04/29/Node-RED/Node-RED-11-Copy-nodes-and-flows/11-4.gif" alt="11-4.gif"></p><p><em>fuctions</em><br>If you want to override the function in the libraries, just open the function and edit it and then save it as the same file. It will override the original one. It’s important to realize that once you’ve imported the function into the function node then it’s stored in that function node. If you go back and change the library, the function in the library doesn’t actually change the  one you’ve already imported into a flow. So you’d have to re-import it back into the flow if you wanted to pick up the changes in the library that you’ve made.<br><img src="/2020/04/29/Node-RED/Node-RED-11-Copy-nodes-and-flows/11-5.gif" alt="11-5.gif"></p><p>In the end, this is the node-red directory on my machine, and you can see the lib folder, go to folder you can see those two folders there one called flows one called functions. They were created by the system.<br><img src="/2020/04/29/Node-RED/Node-RED-11-Copy-nodes-and-flows/11-6.gif" alt="11-6.gif"></p>]]></content>
      
      
      
        <tags>
            
            <tag> Node-RED </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Node-RED 系列（10）-- Subflows</title>
      <link href="/2020/04/29/Node-RED/Node-RED-10-Subflows/"/>
      <url>/2020/04/29/Node-RED/Node-RED-10-Subflows/</url>
      
        <content type="html"><![CDATA[<p>In this article, we will learn about how to create and use Node-RED subflows.<br>A subflow is a collection of connected nodes that can be used as a single unit just like a node.<br>It is a way of packaging functionality from several nodes into a single node.</p><h2 id="Creating-Subflows"><a href="#Creating-Subflows" class="headerlink" title="Creating Subflows"></a>Creating Subflows</h2><p>You can create a subflow in two ways:</p><ul><li>An empty subflow<br><img src="/2020/04/29/Node-RED/Node-RED-10-Subflows/create-empty-subflow.png" alt="create an empty subflow"></li></ul><p><strong>Notice:</strong> you cannot put the input and output node inside the subflows, otherwise, you cannot reuse it as a functionality node.</p><p>If you want to delete the subflow, then double click the subflow and click the delete button<br><img src="/2020/04/29/Node-RED/Node-RED-10-Subflows/delete-subflow.png" alt="delete subflow"></p><ul><li>Selecting nodes from an existing flow<br><img src="/2020/04/29/Node-RED/Node-RED-10-Subflows/existing-subflow.gif" alt="existing subflow"></li></ul><p><strong>Notice:</strong> Be careful if you want to change the subflow, because it will affects any flow that’s actually using this subflow not just the one you’re currently working on.</p><h2 id="Difference-between-subflow-and-link-node"><a href="#Difference-between-subflow-and-link-node" class="headerlink" title="Difference between subflow and link node"></a>Difference between subflow and link node</h2><p>There are some differences between subflow and link node.<br>There are two cases about the link node. A link out node wired to link in node in a same tab and a different tab.</p><table><thead><tr><th align="left">Condition</th><th align="left">Subflow</th><th align="left">Link node(same tab)</th><th align="left">Link node(different tab)</th></tr></thead><tbody><tr><td align="left">Share context.flow</td><td align="left">NO</td><td align="left">YES</td><td align="left">No</td></tr><tr><td align="left">Share context.global</td><td align="left">YES</td><td align="left">YES</td><td align="left">YES</td></tr><tr><td align="left">Catch error in caller tab</td><td align="left">YES</td><td align="left">YES</td><td align="left">NO</td></tr><tr><td align="left">Node actions(e.g. inject node)</td><td align="left">NO</td><td align="left">YES</td><td align="left">YES</td></tr></tbody></table>]]></content>
      
      
      
        <tags>
            
            <tag> Node-RED </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Node-RED 系列（9）-- Using PM2 to keep Node-RED running on Windows</title>
      <link href="/2020/04/29/Node-RED/Node-RED-9-PM2/"/>
      <url>/2020/04/29/Node-RED/Node-RED-9-PM2/</url>
      
        <content type="html"><![CDATA[<h2 id="Node-RED-running-on-Windows"><a href="#Node-RED-running-on-Windows" class="headerlink" title="Node-RED running on Windows"></a>Node-RED running on Windows</h2><p>Once installed, the simple way to run Node-RED is to use the <strong>node-red</strong> command in a command prompt. If you have installed Node-RED as a global npm package, you can use the node-red command:<br><img src="/2020/04/29/Node-RED/Node-RED-9-PM2/node-red.png" alt="node-red"><br>This will output the Node-RED log to the terminal. You must keep the terminal open in order to keep Node-RED running.</p><h2 id="Why-using-PM2"><a href="#Why-using-PM2" class="headerlink" title="Why using PM2"></a>Why using PM2</h2><p>If you are using Windows to develop Node-Red flows or nodes, you may find it helpful to use <strong><a href="https://pm2.keymetrics.io/">PM2</a></strong> to run Node-RED. This can be configured to automatically restart when files change, always keep Node-RED running and manage log output.</p><p>PM2 is a process manager for Node applications with monitoring, load balancing, automatic restart etc.<br>And it’s perfect when you want to take your individual code and use all the CPUs on all the servers and keep the process alive forever.</p><h2 id="Steps-to-using-PM2-to-keep-Node-RED-running-on-Windows"><a href="#Steps-to-using-PM2-to-keep-Node-RED-running-on-Windows" class="headerlink" title="Steps to using PM2 to keep Node-RED running on Windows"></a>Steps to using PM2 to keep Node-RED running on Windows</h2><ol><li><p>Install PM2<br> Execute the following at the command prompt:<br> <code>npm install –g –unsafe-perm pm2</code><br><img src="/2020/04/29/Node-RED/Node-RED-9-PM2/install-pm2.png" alt="pm2 install"></p></li><li><p>Install and config pm2-windows-service<br> Execute the following at the command prompt:<br> <code>npm i –g pm2-windows-service</code><br><img src="/2020/04/29/Node-RED/Node-RED-9-PM2/install-pm2-windows.png" alt="install pm2 windows service"></p></li><li><p>Add environment variables for PM2<br><img src="/2020/04/29/Node-RED/Node-RED-9-PM2/configure-pm2-environment-variable.png" alt="setting environment variable"></p></li><li><p>Install PM2 Service<br> Open command line as administrator and execute below command<br> <code>pm2-service-install</code><br> <em>Tips: choose ‘N’ and continue, and then PM2 service install successfully</em><br><img src="/2020/04/29/Node-RED/Node-RED-9-PM2/pm2-service-install.png" alt="install pm2 service"><br><img src="/2020/04/29/Node-RED/Node-RED-9-PM2/pm2-service.png" alt="pm2 service"></p></li><li><p>Locate the Node-RED red.js File and add it to PM2<br> Execute the following at the command prompt:<br> <code>pm2 start C:\Users\[replace with your user folder]\AppData\Roaming\npm\node_modules\node-red\red.js –n node-red</code><br><img src="/2020/04/29/Node-RED/Node-RED-9-PM2/pm2-start.png" alt="pm2 start"></p></li><li><p>Save configuration<br> Execute the following at the command prompt:<br> <code>pm2 save</code><br><img src="/2020/04/29/Node-RED/Node-RED-9-PM2/pm2-save.png" alt="pm2 save"></p></li><li><p>Check status<br> Execute the following at the command prompt:<br> <code>pm2 status</code><br> <code>pm2 info &lt;id or app name&gt;</code><br> <code>pm2 show &lt;id or app name&gt;</code><br><img src="/2020/04/29/Node-RED/Node-RED-9-PM2/pm2-status.png" alt="pm2 status"></p></li><li><p>Restart pc and check PM2 status<br> <code>pm2 status</code><br><img src="/2020/04/29/Node-RED/Node-RED-9-PM2/pm2-status-restart.png" alt="pm2 status"></p></li></ol><p>That’s all.<br>Hope this can help you!</p>]]></content>
      
      
      
        <tags>
            
            <tag> Node-RED </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Node-RED 系列（8）-- Oauth/OpenID based authentication with Id4Flows</title>
      <link href="/2020/04/29/Node-RED/Node-RED-8-Authentication/"/>
      <url>/2020/04/29/Node-RED/Node-RED-8-Authentication/</url>
      
        <content type="html"><![CDATA[<h1 id="Securing-Node-RED"><a href="#Securing-Node-RED" class="headerlink" title="Securing Node-RED"></a>Securing Node-RED</h1><h2 id="OAuth-OpenID-based-authentication-with-Id4"><a href="#OAuth-OpenID-based-authentication-with-Id4" class="headerlink" title="OAuth/OpenID based authentication with Id4"></a>OAuth/OpenID based authentication with Id4</h2><p>To use an external authentication source, Node-RED can take use a wide range of the strategies provided by <a href="http://www.passportjs.org/">Passport</a>.</p><h3 id="Steps-as-below"><a href="#Steps-as-below" class="headerlink" title="Steps as below:"></a>Steps as below:</h3><ol><li><p>In the node-red installation host, install passport-oauth2 module:<br><img src="/2020/04/29/Node-RED/Node-RED-8-Authentication/install-passport.png" alt="install passport"></p></li><li><p>In your Id4, add new client and remember set the “Client Secret” and add “authorization_code” as allowed grant type</p><ul><li>ClientID</li><li>ClientSecret</li><li>Allowed Grant type (authorization_code)</li><li>redirect url</li></ul></li><li><p>Then add/modify the following in your settings.js<br><img src="/2020/04/29/Node-RED/Node-RED-8-Authentication/configuration.png" alt="configuration"></p></li><li><p>Results as below<br><img src="/2020/04/29/Node-RED/Node-RED-8-Authentication/login-with-authentication.png" alt="login with authentication"></p></li></ol><p>Hope this can help you.</p>]]></content>
      
      
      
        <tags>
            
            <tag> Node-RED </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Node-RED 系列（7）-- Initializing Node-RED Flows</title>
      <link href="/2020/04/29/Node-RED/Node-RED-7-Initializing%20flow/"/>
      <url>/2020/04/29/Node-RED/Node-RED-7-Initializing%20flow/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
        <tags>
            
            <tag> Node-RED </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Node-RED 系列（6）-- Core nodes (Http In/Http Request)</title>
      <link href="/2020/04/29/Node-RED/Node-RED-6-Core-Nodes-4/"/>
      <url>/2020/04/29/Node-RED/Node-RED-6-Core-Nodes-4/</url>
      
        <content type="html"><![CDATA[<h2 id="Http-In"><a href="#Http-In" class="headerlink" title="Http In"></a>Http In</h2><p>Creates an HTTP end-point for creating web services.</p><p><strong>Outputs</strong></p><div><font color="#FF0000">payload</font></div>For a GET request, contains an object of any query string parameters. Otherwise, contains the body of the HTTP request.<div><font color="#FF0000">req</font></div>An HTTP request object. This object contains multiple properties that provide information about the request.- ```body``` - the body of the incoming request. The format will depend on the request.- ```headers``` - an object containing the HTTP request headers. - ```params``` - an object containing any route parameters. - ```cookies``` - an object containing the cookies for the request. - ```files``` - if enabled within the node, an object containing any files uploaded as part of a POST request. <div><font color="#FF0000">res</font></div>An HTTP response object. This property should not be used directly; the ```HTTP Response``` node documents how to respond to a request. This property must remain attached to the message passed to response node.<p>The node will listen on the configured path for requests of a particular type. The path can be fully specified, such as <code>user/</code>, or include named parameters that accept any value, such as <code>/user/:name</code>. When named parameters are used, their actual value in a request can be accessed under <code>msg.req.params</code>.</p><p>For request that include a body, such as a POST or PUT, the contents of the request is made available as <code>msg.payload</code>.</p><p>If the content type of the request can be determined, the body will be parsed to any appropriate type. For example, <code>application/json</code> will be parsed to its JavaScript object representation.</p><p><strong>Note:</strong> this node does not send any response to the request. The follow must include an HTTP Response node to complete the request.</p><p><em>Usage example:</em><br><em>Source:</em></p><h2 id="Http-Request"><a href="#Http-Request" class="headerlink" title="Http Request"></a>Http Request</h2><p>Sends HTTP requests and returns the response.</p><p><strong>Inputs</strong></p><div><font color="#FF0000">url</font></div>If not configured in the node, this optional property sets the url of the request.<div><font color="#FF0000">method</font></div>If not configured in the node, this optional property sets the HTTP method of the request. Must be one of ```GET```, ```PUT```, ```POST```, ```PATCH``` or ```DELETE```.<div><font color="#FF0000">headers</font></div>Sets the HTTP headers of the request.<div><font color="#FF0000">cookies</font></div>If set, can be used to send cookies with the request.<div><font color="#FF0000">payload</font></div>Sent as the body of the request.<div><font color="#FF0000">rejectUnauthorized</font></div>If set to ```false```, allows requests to be made to https sites that use self signed certificates.<div><font color="#FF0000">followRedirects</font></div>If set to ```false``` prevent following Redirect(HTTP 301). ```true``` by default.<div><font color="#FF0000">requestTimeout</font></div>If set to a positive number of milliseconds, will override the globally set ```httpRequestTimeout``` parameter.<p><strong>Outputs</strong></p><div><font color="#FF0000">payload</font></div>The body of the response. The node can be configured to return the body as a string, attempt to parse it as a JSON string or leave it as a binary buffer.<div><font color="#FF0000">statusCode</font></div>The status code of the response, or the error code if the request could not be completed.<div><font color="#FF0000">headers</font></div>An object containing the response headers.<div><font color="#FF0000">responseUrl</font></div>In case any redirects occurred while processing the request, this property is the final redirected url. Otherwise, the url of the original request.<div><font color="#FF0000">responseCookies</font></div>If the response includes cookies, this property is an object of name/value pairs for each cookie.<div><font color="#FF0000">redirectList</font></div>If the request was redirected one or more times, the accumulated information will be added to this property. 'location' is the next destination. 'cookies' is the cookies returned from the redirect souce.<p><em>Usage example:</em><br><em>Source:</em></p>]]></content>
      
      
      
        <tags>
            
            <tag> Node-RED </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Node-RED 系列（5）-- Core nodes (Template/Split/Join)</title>
      <link href="/2020/04/29/Node-RED/Node-RED-5-Core-Nodes-3/"/>
      <url>/2020/04/29/Node-RED/Node-RED-5-Core-Nodes-3/</url>
      
        <content type="html"><![CDATA[<h2 id="Template"><a href="#Template" class="headerlink" title="Template"></a>Template</h2><p>The Template node can be used to generated text using a message’s properties to fill out a template.</p><p>It use the <a href="https://mustache.github.io/mustache.5.html">Mustache</a> templating language to generate the result.</p><p>For example, a template of:</p><pre class="line-numbers language-none"><code class="language-none">This is the payload: {{payload}} !<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>Will replace <code>{{payload}}</code> with the value of the message’s <code>payload</code> property.</p><p>By default, Mustache will replace certain characters with their HTML escape codes. To stop that happening, you can use triple braces: <code>{{{payload}}}</code>.</p><p>Mustache supports simple loops on lists. For example, If <code>msg.payload</code> contains an array of name, such as: <code>["Tom", "Jack", "Tony"]</code>, the following template will create an HTML list of the names:</p><pre class="line-numbers language-none"><code class="language-none">&lt;ul&gt;{{#payload}}  &lt;li&gt;{{.}}&lt;/li&gt;{{/payload}}&lt;/ul&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">&lt;ul&gt;  &lt;li&gt;Tom&lt;/li&gt;  &lt;li&gt;Jack&lt;/li&gt;  &lt;li&gt;Tony&lt;/li&gt;&lt;/ul&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>The node will set the configured message or context property with the result of the template. If the template generates the valid JSON or YAML content, it can be configured to parse the result to the corresponding JavaScript object.</p><p><em>Usage examples:</em></p><p><em>Source</em></p><h2 id="Split"><a href="#Split" class="headerlink" title="Split"></a>Split</h2><p>Split a message into a sequence of messages.</p><p><strong>Inputs</strong></p><div><font color="#FF0000">payload</font></div>The behavior of the node is determined by the type of ```msg.payload```:- **string/buffer** - the message is split using specified character (default: ```\n```), buffer sequence or into fixed lengths.- **array** - the message is split into either individual array elements, or arrays of a fixed-length.- **object** - a message is sent for each key/value pair of the object.<p><strong>Outputs</strong></p><div><font color="#FF0000">parts</font></div>This property contains information about how the message was split from the original message. If passed to the **Join** node, the sequence can be reassembled into a single message. The property has the following properties:- ```id``` - an identifier for the group of messages- ```index``` - the position of the group- ```count``` - if know, the total number of messages in the group. See 'streaming mode' below.- ```type``` - the type of message - string/array/object/buffer- ```ch``` - for a string or buffer, the data used to split the message as either the string or an array of bytes- ```key``` - for an object, the key of the property this message was created from. The node can be configured to also copy this value to another message properties, such as ```msg.topic```- ```len``` - the length of each message when split using a fixed length value<p>This node makes it easy to create a flow that performs common actions across a sequence of messages before, using the <strong>join</strong> node, recombining the sequence into a single message.</p><p>It uses the <code>msg.parts</code> property to track the individual parts of a sequence.</p><p><strong>Streaming mode</strong><br>The node can also be used to reflow a stream of messages. For example, a serial device that sends newline-terminated commands may deliver a single message with a partial command as its end. In ‘Streaming mode’, this node will split a message and send each complete segment. If there is a partial segment at the end, the node will hold on to it and prepend it to the next message that is received.</p><p>When operating in this mode, the node will not set the <code>msg.parts.count</code> property as it does not know how many messages to expect in the stream. This means it cannot be used with the <strong>join</strong> node in its automatic mode.</p><p><em>Usage examples:</em></p><p><em>Source</em></p><h2 id="Join"><a href="#Join" class="headerlink" title="Join"></a>Join</h2><p>Joins sequences of messages into a single message.<br>There are three modes available:</p><ul><li><p><strong>automatic</strong><br>When paired with the <strong>split</strong> node, it will automatically join the messages to reverse the split that was performed.</p></li><li><p><strong>manual</strong><br>Join sequences of message in a variety of ways.</p></li><li><p><strong>reduce sequence</strong><br>Apply an expression against all messages in a sequence to reduce it to a single message.</p></li></ul><p><strong>Inputs</strong></p><div><font color="#FF0000">parts</font></div>To automatically join a sequence of messages, they should all have this property set. The **split** node generates this property but it can be manually created. It has the following properties:- ```id``` - an identifier for the group of messages- ```index``` - the position within the goup- ```count``` - the total number of messages in the group- ```type``` - the type of message - string/array/object/buffer- ```ch``` - for a string or buffer, the data used to split the message as either the string or an array of bytes- ```key``` - for an object, the key of the property this message was created from- ```len``` - the length of each message when split using a fixed length value<div><font color="#FF0000">complete</font></div>If set, the node will append the payload, and then send the output message in its current state. If you don't wish to append the payload, delete it from the msg.<p><em>Usage examples:</em></p><p><em>Source</em></p>]]></content>
      
      
      
        <tags>
            
            <tag> Node-RED </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Node-RED 系列（4）-- Core nodes (Change/Switch/Json)</title>
      <link href="/2020/04/29/Node-RED/Node-RED-4-Core-Nodes-2/"/>
      <url>/2020/04/29/Node-RED/Node-RED-4-Core-Nodes-2/</url>
      
        <content type="html"><![CDATA[<h2 id="Change"><a href="#Change" class="headerlink" title="Change"></a>Change</h2><p>Set, change, delete or move properties of a message, flow context or global context.<br>The node can specify multiple rules that will be applied in the order they are defined.</p><p>The available operations are:</p><div><font color="#FF0000">Set</font></div>set a property. The value can be a variety of different types or can be taken from an existing message or context property.<div><font color="#FF0000">Change</font></div>search &amp; replace parts of the property. If regular expressions are enabled, the "replace with" property can include capture groups, for example ```$1```.Replace will only change the type if there is a complete match.<div><font color="#FF0000">Delete</font></div>delete a property<div><font color="#FF0000">Move</font></div>move or rename a property<p>The “expression” type uses the JSONata query and expression language.</p><p><em>Usage examples:</em></p><h2 id="Switch"><a href="#Switch" class="headerlink" title="Switch"></a>Switch</h2><p>The Switch node allows messages to be routed to different branches of a flow by evaluating a set of rules against each message.</p><p>When a message arrives, the node will evaluate each of the defined rules and forward the message to the corresponding outputs of any matching rules.<br>Optionally, the node can be set to stop evaluating rules once it finds that matches.<br>The rules can be evaluated against an individual message property, a flow or global context property, environment variable or the result of a JSONata expressions.</p><p>There are four types of rule:</p><ol><li><strong>Value</strong> rules are evaluated against the configured property.</li><li><strong>Sequence</strong> rules can be used on message sequences, such as those generated by split node.</li><li>A JSONata <strong>expression</strong> can be provided that will be evaluated against the whole message and will match if the expression returns a true value.</li><li>An <strong>otherwise</strong> rule can be used to match if one of the preceding rules have matched.</li></ol><div><font color="#FF0000">Notes</font></div>The ```is true/false``` and ```is null``` rules perform strict comparisons against those types. They do not convert between types.<p>The <code>is empty</code> and <code>is not empty</code> rules can be used to test the length of String, Arrays and Buffers, or the number of properties an Object has. Neither rule will pass if the property being tested has a <code>boolean</code>, <code>null</code> or <code>undefined</code> value.</p><p>By default, the node does not modify the <code>msg.parts</code> property of messages that are part of a sequence.</p><p>The <strong>recreated message sequences</strong> option can be enabled to generate new message sequences for each rule that matches. In this mode, the node will buffer the entire the incoming sequence before sending the new sequences on. The runtime setting <code>nodeMessageBufferMaxLength</code> can be used to limit how many message nodes will buffer.</p><p><em>Usage examples:</em></p><h2 id="Json"><a href="#Json" class="headerlink" title="Json"></a>Json</h2><p>Converts between a JSON string and its JavaScript object representation, in either direction.</p><p><strong>Inputs</strong></p><div><font color="#FF0000">payload</font></div>A JavaScript object or JSON string.<div><font color="#FF0000">schema</font></div>An optional JSON Schema object to validate the payload against. The property will be deleted before the ```msg``` is sent to the next node.<p><strong>Outputs</strong></p><div><font color="#FF0000">payload</font></div>- If the input is a JSON string it tries to parse it to a JavaScript object.- If the input is a JavaScript object it creates a JSON string. The string can optionally be well-formatted.<div><font color="#FF0000">schemaError</font></div>If JSON schema validation fails, the catch node will have a ```schemaError``` property containing an array of errors.<p>By default, the node operates on <code>msg.payload</code>, but can be configured to any message property.</p><p>The node can also be configured to ensure a particular encoding instead of toggling between the two. This can be used, for example, with the <code>Http In</code> node to ensure the payload is a parsed object even if an incoming request did not set its content-type correctly for the HTTP In node to do the conversion.</p><p>If the node is configured to ensure the property is encoded as a String and it receives a String, no further checks will be made of the property. It will not check the String is valid JSON nor will it reformat it if the format option is selected.</p><p><em>Usage examples:</em></p>]]></content>
      
      
      
        <tags>
            
            <tag> Node-RED </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Node-RED 系列（3）-- Core nodes (Inject/Debug/Function)</title>
      <link href="/2020/04/29/Node-RED/Node-RED-3-Core-Nodes-1/"/>
      <url>/2020/04/29/Node-RED/Node-RED-3-Core-Nodes-1/</url>
      
        <content type="html"><![CDATA[<p>The inject, debug and function node are the most commonly used of the Node-RED core nodes.<br>Core nodes are the ones that are part of the initial Node-RED install.</p><h2 id="Inject"><a href="#Inject" class="headerlink" title="Inject"></a>Inject</h2><blockquote><p>Injects a message into a flow either manually or at regular intervals. The message payload can be a variety of types, including strings, JavaScripts objects or the current time.</p><h5 id="Outputs"><a href="#Outputs" class="headerlink" title="Outputs"></a>Outputs</h5><p><em><code>payload</code></em><br>The configured payload of the message.<br><em><code>topic</code></em><br>An optional property that can be configured in the node.<br>#####Details<br>The Inject node can initiate a flow with a specific payload value. The default payload is a timestamp of the current time in millisecs since January 1st, 1970.</p><p>The node also supports injecting strings, numbers, booleans, JavaScript objects, or flow/global context values.</p><p>By default, the node is triggered manually by clicking on its button within the editor. It can also be set to inject at regular intervals or according to a schedule.</p><p>It can also be configured to inject once each time the flows are started.</p><p>The <em>maximum Interval</em> that can be specified is about 596 hours/ 24days. However if you are looking at intervals greater than one day you should consider using a scheduler node that can cope with power outages and restarts.<br><strong>Note</strong>: The <em>“Interval between times”</em> and <em>“at a specific time”</em> options use the standard cron system. This means that 20 minutes will be at the next hour, 20 minutes past and 40 minutes past - not in 20 minutes time. If you want every 20 minutes from now - use the <em>“interval”</em> option.<br><img src="/2020/04/29/Node-RED/Node-RED-3-Core-Nodes-1/inject-node.png" alt="Inject node"></p><p><img src="/2020/04/29/Node-RED/Node-RED-3-Core-Nodes-1/inject-sample.png" alt="image.png"></p><ul><li><ol><li>trigger the inject manually</li></ol></li><li><ol start="2"><li>debug messages</li></ol></li><li><ol start="3"><li>topic - display the topic info</li></ol></li><li><ol start="4"><li>payload - display the payload info</li></ol></li></ul></blockquote><h2 id="Debug"><a href="#Debug" class="headerlink" title="Debug"></a>Debug</h2><blockquote><p>Displays selected message properties in the debug sidebar tab and optionally the runtime log. By default it displays <code>msg.payload</code>, but can be configured to display any property, the full message or the result of a JSONData expression.</p><h5 id="Details"><a href="#Details" class="headerlink" title="Details"></a>Details</h5><p>The debug sidebar provides a structured view of the messages it is sent, making it easier to understand their structure.<br>JavaScript objects and arrays can be collapsed and expanded as required. Buffer objects can be displayed as raw data or as a string if possible.</p><p>Alongside each message, the debug sidebar includes information about the time the message was received, the node that sent it and the type of the message. Clicking on the source node id will reveal that node within the workspace.</p><p>The button on the node can be used to enable or disable its output. It is recommended to disable or remove any Debug nodes that are not being used.</p><p>The node can also be configured to send all messages to the runtime log, or to send short (32 characters) to the status text under the debug node.<br><img src="/2020/04/29/Node-RED/Node-RED-3-Core-Nodes-1/debug-node.png" alt="Debug node"></p></blockquote><h2 id="Function"><a href="#Function" class="headerlink" title="Function"></a>Function</h2><blockquote><p>A JavaScript function to run against the messages being received by the node.</p><p>The messages are passed in as a JavaScript object called <code>msg</code>.</p><p>By convention it will have a <code>msg.payload</code> property containing the body of the message.</p><p>The function is expected to return a message object (or multiple message objects), but can choose to return nothing in order to halt a flow.</p><p>The <strong>Setup</strong> tab contains code that will be run whenever the node is started. The <strong>Close</strong> tab contains node that will be run whenever the node is stopped.</p><p>If an promise object is returned from the setup node, input message processing starts after its completion.</p><h5 id="Details-1"><a href="#Details-1" class="headerlink" title="Details"></a>Details</h5><p>See the online documentation for more information on writing functions.<br>Sending messages<br>The function can either return the messages it wants to pass on to the next nodes in the flow, or can call <code>node.send(messages)</code>.<br>It can return/send:</p><ul><li>a single message object - passed to nodes connected to the first output</li><li>an array of message objects - passed to nodes connected to the corresponding outputs</li></ul><p>Note: The setup code is executed during the initialization of nodes. Therefore, if <code>node.send</code> is called in the setup tab, subsequent nodes may not be able to receive the message.<br>If any element of the array is itself an array of messages, multiple messages are sent to the corresponding output.<br>If null is returned, either by itself or as an element of the array, no message is passed on.</p><h6 id="Logging-and-Error-Handling"><a href="#Logging-and-Error-Handling" class="headerlink" title="Logging and Error Handling"></a>Logging and Error Handling</h6><p>To log any information, or report an error, the following functions are available:</p><ul><li><code>node.log("Log message")</code></li><li><code>node.warn("Warning")</code></li><li><code>node.error("Error")</code></li></ul><p>The Catch node can also be used to handle errors. To invoke a Catch node, pass <code>msg</code> as a second argument to <code>node.error</code>.</p><pre class="line-numbers language-none"><code class="language-none">&gt;node.error("Error",msg);<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>Accessing Node Information<br>In the function block, id and name of the node can be referenced using the following properties:</p><ul><li><code>node.id</code> - id of the node</li><li><code>node.name</code> - name of the node</li></ul><p>Using environment variables<br>Environment variables can be accessed using <code>env.get("MY_ENV_VAR")</code></p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> Node-RED </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Node-RED 系列（2）-- Creating your first flow</title>
      <link href="/2020/04/29/Node-RED/Node-RED-2-Creating-your-first-flow/"/>
      <url>/2020/04/29/Node-RED/Node-RED-2-Creating-your-first-flow/</url>
      
        <content type="html"><![CDATA[<h2 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h2><p>This tutorial introduces the Node-RED editor and creates a flow that demonstrates the Inject, Debug and Function nodes.</p><h2 id="Access-the-editor"><a href="#Access-the-editor" class="headerlink" title="Access the editor"></a>Access the editor</h2><p>With the Node-RED  <font color="#FF0000">running</font> , open the editor in a web browser.<br>If you are using a browser on the same computer that is running Node-RED, you can access it with the url:  <a href="http://localhost:1880/">http://localhost:1880</a>.</p><p>If you are using a browser on another computer, you will need to use the ip address of the computer running Node-RED: http://<ip-address>:1880</ip-address></p><p><font color="#FF0000">Note:</font> please add Inbound rules  if necessary<br><img src="/2020/04/29/Node-RED/Node-RED-2-Creating-your-first-flow/node-red-editor.png" alt="Node-RED editor"></p><h2 id="Add-an-Inject-node"><a href="#Add-an-Inject-node" class="headerlink" title="Add an Inject node"></a>Add an Inject node</h2><p>The Inject node allows you to inject messages into a flow, either by clicking the button on the node or setting a time interval between injects.<br>Drag one onto the <font color="#FF0000">workspace</font> from the <font color="#FF0000">palette</font>.<br>Select the newly added Inject node to see information about its properties and a description of what it does in the <font color="#FF0000">information sidebar pane</font> </p><h2 id="Add-a-Debug-node"><a href="#Add-a-Debug-node" class="headerlink" title="Add a Debug node"></a>Add a Debug node</h2><p>The Debug node causes any message to be displayed in the <font color="#FF0000">Debug sidebar</font>. By default, it just displays the payload of the message, but it is possible to display the entire message object.</p><h2 id="Wire-the-two-node-together"><a href="#Wire-the-two-node-together" class="headerlink" title="Wire the two node together"></a>Wire the two node together</h2><p>Connect the Inject and Debug nodes together by <font color="#FF0000">dragging</font> between the output port of one to the input port of the other.</p><h2 id="Deploy"><a href="#Deploy" class="headerlink" title="Deploy"></a>Deploy</h2><p>At this point, the nodes only exist in the editor and must be deployed to the server.</p><p>With the Debug sidebar tab selected, click the Inject button. You should see numbers appear in the sidebar. By default, the inject node use the number of milliseconds since January 1st 1970 as its payload.</p><h2 id="Add-a-Function-node"><a href="#Add-a-Function-node" class="headerlink" title="Add a Function node"></a>Add a Function node</h2><p>The Function node allows you to pass each message though a JavaScript function.<br>Delete the existing wire (select it and press the delete on the keyboard).<br>Wire a Function node in between the Inject and Debug nodes.<br>Double-click on the Function node to bring up the editor dialog. Copy the following code into the function field:</p><pre class="line-numbers language-none"><code class="language-none">// Create a Date object from the payloadvar date = new Date(msg.payload);// Change the payload to be a formatted Date stringmsg.payload = date.toString();// Return the message so it can be sent onreturn msg;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>click Done to close the edit dialog and then click the deploy button.<br>Now when you click the Inject button, the messages in the sidebar will now be formatted is readable timestamps.</p><hr><h2 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h2><p>This flow demonstrates the basic concept of creating a flow. It shows how the Inject node can be used to manually trigger a flow, and how the Debug node displays the messages in the sidebar. It also shows how the Function node can be used to write custom JavaScript to run against messages.</p><h2 id="Source"><a href="#Source" class="headerlink" title="Source"></a>Source</h2><p>The flow created in the tutorial represented by the following json. To import it into the editor, copy it to your clipboard and then paste it into the Import dialog.</p>]]></content>
      
      
      
        <tags>
            
            <tag> Node-RED </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Angular8 实战（七）【初识组件】顶部TabBar</title>
      <link href="/2020/04/29/Angular/Angular8%20Tutorial/Angular8%20Tutorial-7-Component/"/>
      <url>/2020/04/29/Angular/Angular8%20Tutorial/Angular8%20Tutorial-7-Component/</url>
      
        <content type="html"><![CDATA[<p>本章主要讲解组件的基础概念及应用。</p><h2 id="什么是组件？"><a href="#什么是组件？" class="headerlink" title="什么是组件？"></a>什么是组件？</h2><p>组件由模板、样式、类、元数据组成。如下图，每一个组成部分都有各自的主要职责。<br><img src="/2020/04/29/Angular/Angular8%20Tutorial/Angular8%20Tutorial-7-Component/1.png" alt="image.png"><br>下面我们以上一章中创建的根组件来详细讲解一下组件的构成。<br>首先，我们用<code>ng serve -o</code>把angualr项目运行起来，看默认情况下的页面。<br><em>(图片是由视频转换而来，有点差，将就看)</em></p><p><img src="/2020/04/29/Angular/Angular8%20Tutorial/Angular8%20Tutorial-7-Component/2.gif" alt="1.gif"></p><h2 id="通过根组件app-component讲解来认识组件"><a href="#通过根组件app-component讲解来认识组件" class="headerlink" title="通过根组件app.component讲解来认识组件"></a>通过根组件app.component讲解来认识组件</h2><ol><li><p>一个完整的组件一般由四个文件组成：</p><ul><li>app.component.html</li><li>app.component.css</li><li>app.component.ts</li><li>app.component.spec.ts   //凡是带spec的都是测试文件</li></ul></li><li><p>app.component.ts</p><ol><li>引入Angular公共模块，服务，组件等</li><li>@Component 称为组件元数据装饰器，简称装饰器，用来告知Angular框架如何处理一个typescript类。Component装饰器包含多个属性，这些属性的值叫元数据，angualr会根据这些属性的值来渲染组件并执行组件的逻辑</li><li>selector 选择器，上一篇中我们讲angular.json时讲到prefix，就是这里的app。改了prefix，在之后创建组件时，选择器中的前缀也会跟着改变。选择器的作用是：当其它页面想嵌入此页面时，可通过<app-root></app-root>标签来调用，并展示组件的内容。</li><li>templateUrl 模板，通过组件自带的模板（app.component.html）来定义组件的外观，模板是以HTML的形式存在，告诉Angular应该如何来渲染组件。同样，我们也可以在模板中使用angular的数据绑定语法来呈现控制器中的数据。</li><li>styleUrls css样式文件（app.component.css），组件可以关联一些样式表文件来更好的渲染组件的模板文件</li><li>定义了组件的控制器，控制器是指被@Component装饰器装饰的typescript类，它包含模板相关的所有属性和方法，与页面相关的大部分逻辑都编写在这个控制器中。控制器通过数据绑定与模板通讯，模板展现控制器的数据，控制器处理模板上发生的事件。AppComponent就是一个标准的typescript类，类里面没有框架的痕迹，就是用装饰器将元数据附加到AppComponent类上。</li><li>title AppComponent类中定义的属性，属性值会被展示到模板中。</li><li>输入属性：@Input()，用来接收外部传入的数据，输入属性使得父组件直接传递数据给子组件。angular程序其实就是一个组件树，输入属性允许在组件树种传递数据。</li><li>输出属性：@Outputs()，与前面的输入属性相对的，定义一个其它组件需要的事件或属性在组件间共享数据。<br><img src="/2020/04/29/Angular/Angular8%20Tutorial/Angular8%20Tutorial-7-Component/3.png" alt="image.png"></li></ol></li><li><p>app.component.html</p><ol><li>数据绑定Angular8 实战（七）【初识组件】顶部TabBar，就是模板的各个部分与控制器的各个部分相互作用的一个机制。我们在模板种添加绑定标记，如何把二者关联起来Angular8 实战（七）【初识组件】顶部TabBar是最常见的将控制器的值绑定到模板种的绑定方法，叫差值表达式。<br><img src="/2020/04/29/Angular/Angular8%20Tutorial/Angular8%20Tutorial-7-Component/4.png" alt="image.png"></li><li>Angular 中数据文本绑定、绑定Html、绑定属性、双向数据绑定的实现方式<ul><li>数据文本绑定，使用<code>{{}}```         在组件类中声明属性 ```public test1="测试数据文本绑定";``` ，然后在模板中绑定属性```{{test1}}</code></li><li>绑定Html，可以使用绑定属性的方式，给div绑定innerHTML属性<br> 在组件类中声明属性<code>public test2="&lt;h2&gt;用h2标签来测试绑定Html&lt;/h2&gt;"</code>，然后在模板中通过<code>[]</code>绑定，如：<code>&lt;div innerHTML="test2"&gt;&lt;/div&gt;</code></li><li>属性绑定，上面可知使用[]来绑定元素的属性<br>在组件类中声明属性<pre class="line-numbers language-none"><code class="language-none">public id="testId"; public title="test title"<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>在模板中通过[]绑定<br><code>&lt;div [id]="id" [title]="title"&gt;测试属性绑定&lt;/div&gt;</code></li><li>双向绑定<br>使用数据双向绑定需要在项目中引入FormModule，在根模块app.module.ts中引入<br><img src="/2020/04/29/Angular/Angular8%20Tutorial/Angular8%20Tutorial-7-Component/5.png" alt="image.png"><br>在组件类中声明属性<br><code>public inputValue="default value"</code><br>在模板中通过[(ngModel)]绑定<br><code>&lt;input type="text" [(ngModel)]="inputValue"/&gt;{{inputValue}}</code><h2 id="完成顶部TabBar"><a href="#完成顶部TabBar" class="headerlink" title="完成顶部TabBar"></a>完成顶部TabBar</h2>我们打开pinduoduo，F12 选择设备为iPhone X，可以看到顶部导航栏可左右滑动，但不会上下移动。底部也是固定不动的。<br><img src="/2020/04/29/Angular/Angular8%20Tutorial/Angular8%20Tutorial-7-Component/6.gif" alt="6.gif"></li></ul></li></ol></li></ol><p>根据上面gif的演示，我们可以大概知道首页的组件结构，如下：<br><img src="/2020/04/29/Angular/Angular8%20Tutorial/Angular8%20Tutorial-7-Component/7.png" alt="image.png"></p><p>下面我们在AppComponent中实现顶部导航栏，暂时不考虑从API 获取数据源，全部在前端hardcode一部分数据源。</p><ol><li>首先，导航栏部分有好多个tab项，“推荐”，“女装”，“鞋包”，“家装”。。。每一个都手动在html文件中写是不友好的，而且代码看上去也不美观，对于以后tab项的维护也不是很方便。所以，我们先在组件类中声明属性topBars，然后在模板中绑定即可。</li></ol><ul><li><p>组件类中声明属性<br><code>public topBars = ['热门', '女装', '男装', '鞋包', '家装', '家居百货', '汽车', '美食', '儿童', '母婴'];</code></p></li><li><p>模板中绑定组件类中声明的属性并循环此属性值 （ngFor 后面章节会有细解）</p><pre class="line-numbers language-none"><code class="language-none">&lt;ul&gt;  &lt;li *ngFor="let item of topBars"&gt;{{item}}&lt;/li&gt;&lt;/ul&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>样式文件中调整显示<br>```<br>ul{</p><pre><code>     padding:0;     margin:0;</code></pre><p> }</p><p>ul li{</p><pre><code>     display: inline-block;     margin: 0 5px;</code></pre><p>}</p></li></ul><p>此时一个不可拖动的顶部导航栏就完成了，如下图<br><img src="/2020/04/29/Angular/Angular8%20Tutorial/Angular8%20Tutorial-7-Component/8.png" alt="image.png"></p><p>滚动部分会在下一节讲解~</p>]]></content>
      
      
      
        <tags>
            
            <tag> Frontend </tag>
            
            <tag> Angular8 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Angular8 实战（六）工程源码文件结构</title>
      <link href="/2020/04/29/Angular/Angular8%20Tutorial/Angular8%20Tutorial-6-Angular%20project%20structure/"/>
      <url>/2020/04/29/Angular/Angular8%20Tutorial/Angular8%20Tutorial-6-Angular%20project%20structure/</url>
      
        <content type="html"><![CDATA[<p>本章讲解src源码文件结构</p><ul><li>src      //源代码目录</li><li>app      //工程源码目录 之后主要工作的目录，添加其它模块、组件等<ul><li>app.component.css             //根模块样式文件</li><li>app.component.html            //根组件模板文件</li><li>app.component.ts                //根组件类文件</li><li>app.component.spec.ts       //根组件测试文件</li><li>app.module.ts       //根模块</li></ul></li><li>assets      //资源目录，包含图片，资源文件等</li><li>environments        //环境配置<ul><li>environment.ts      //开发环境，当执行<code>ng build</code>时，使用开发环境配置</li><li>environment.prod.ts      //生产环境，当执行<code>ng build --prod</code>时，使用生产环境配置</li></ul></li><li>favicon.ico      //收藏图标</li><li>index.html      //单页应用的宿主HTML</li><li>main.ts      //入口ts文件</li><li>polyfills.ts      //用于不同浏览器的兼容脚本加载</li><li>styless.css      //整个项目的全局css</li><li>test.ts      //测试入口<br><img src="/2020/04/29/Angular/Angular8%20Tutorial/Angular8%20Tutorial-6-Angular%20project%20structure/1.png" alt="image.png"></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> Frontend </tag>
            
            <tag> Angular8 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Angular8 实战（五）CLI 工程结构</title>
      <link href="/2020/04/29/Angular/Angular8%20Tutorial/Angular8%20Tutorial-5-Angular%20Cli/"/>
      <url>/2020/04/29/Angular/Angular8%20Tutorial/Angular8%20Tutorial-5-Angular%20Cli/</url>
      
        <content type="html"><![CDATA[<p>本章讲解如何用CLI 创建Angular工程，创建的工程包含哪些文件以及这些文件的作用。</p><h2 id="正常情况下创建一个项目："><a href="#正常情况下创建一个项目：" class="headerlink" title="正常情况下创建一个项目："></a>正常情况下创建一个项目：</h2><ol><li>用PowerShell 或 运行CMD 定位到你想存放项目的文件夹</li><li>执行命令：ng new pinduoduo （pinduoduo是项目名）</li><li>命令开始执行时，第一个问题是：是否添加路由？这边选否</li><li>第二个问题：选用哪个样式？ 这边选SCSS </li><li>此时项目就开始创建，先是创建了一堆基础架构文件；然后开始下载依赖包，下载依赖包这个操作一般需要花费点时间</li><li>项目创建完之后文件夹中出现一个以项目名命名的文件夹<br><img src="/2020/04/29/Angular/Angular8%20Tutorial/Angular8%20Tutorial-5-Angular%20Cli/1.png" alt="image.png"></li></ol><h2 id="快速创建项目"><a href="#快速创建项目" class="headerlink" title="快速创建项目"></a>快速创建项目</h2><p>从上面第5点可以看出，正常创建一个项目，在安装依赖包这一步会需要很长时间。但是我想先快速创建一个项目，那么我们就可以用如下命令，可直接跳过安装这个步骤，直接创建项目文件，这个过程大概几秒即可完成。</p><pre class="line-numbers language-none"><code class="language-none">ng new pinduoduo --skip-install --style css --routing false<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>此时可用VsCode打开项目，并执行以下命令安装依赖包</p><pre class="line-numbers language-none"><code class="language-none">npm install<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>或</p><pre class="line-numbers language-none"><code class="language-none">cnpm install<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>安装完依赖包后，项目会出现一个叫node_modules 文件夹，这个文件夹就是用来存放所有依赖包的。</p><h2 id="查看命令帮助"><a href="#查看命令帮助" class="headerlink" title="查看命令帮助"></a>查看命令帮助</h2><p>ng new 究竟支持哪些参数呢？在不确定的情况下，用–help命令，可查看。</p><pre class="line-numbers language-none"><code class="language-none">ng new --help<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如下,每个参数下面都有详细的解释<br><img src="/2020/04/29/Angular/Angular8%20Tutorial/Angular8%20Tutorial-5-Angular%20Cli/2.png" alt="image.png"></p><p>类似的，ng 支持哪些子命令呢，也可以用–help来查看</p><pre class="line-numbers language-none"><code class="language-none">ng --help<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如下：<br><img src="/2020/04/29/Angular/Angular8%20Tutorial/Angular8%20Tutorial-5-Angular%20Cli/3.png" alt="image.png"></p><p>我们在开发过程中，最常用的两个命令：</p><pre class="line-numbers language-none"><code class="language-none">ng serve<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">ng build<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>ng serve 启动脚手架服务，启动开发环境，默认端口是4200.<br>如果想改变启动端口如下：</p><pre class="line-numbers language-none"><code class="language-none">ng serve --port 4300<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果想启动时，直接在浏览器中打开，不需要再手动去浏览器中输入，那执行如下命令</p><pre class="line-numbers language-none"><code class="language-none">ng serve --port 4300 -o      ng serve -o<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="项目结构和文件内容详解"><a href="#项目结构和文件内容详解" class="headerlink" title="项目结构和文件内容详解"></a>项目结构和文件内容详解</h2><ul><li><p>e2e<br>e2e是End to End Testing （端到端测试）。ng e2e 编译并启动angular项目，然后使用Protractor运行端到端测试</p></li><li><p>node_modules<br>angular项目依赖包存放目录，执行npm install / cnpm install 时会自动创建此目录。</p></li><li><p>src<br>angular源码文件夹</p></li><li><p>.editorconfig<br>在不同的代码编辑器中，维持相同的代码风格。看似不起眼的配置，其实用处非常大。比如我用VsCode，另一个同事用Sublime，我们想在看和编辑时都能保持代码风格一致，如：代码缩进2个空格。 就会用到这个配置文件了。</p></li><li><p>.gitignore<br>这个是我们在git中想忽略某些文件，比如我们在提交angular代码时，要忽略掉node_modules、dist等文件夹。这是Angular CLI 默认帮我们创建的gitignore文件，是比较全面的。当然如果你自己添加了测试文件在本地，又不想提交，那么也可以配置到这个ignore列表中。</p></li><li><p>angular.json<br>这个是Angular项目的定义文件。</p><ul><li>$schema<br>Json Schema 是一个允许我们注解和验证JSON数据格式的工具，Angular CLI使用它来强化对于Angular Workspace schema的解释说明</li><li>projects 部分<br>这是Angular工作空间中所有项目的配置信息。如：<pre><code>-  root 指定了项目文件的根文件夹，可能为空，但它指定了一个特定的文件夹- sourceRoot 指定项目源文件位置- prefix 当CLI创建`component` 或者`directive`时，加前缀- architect 定义自动化命令，如build，输出地址，资源文件地址等的配置- defaultProject 指定默认项目，当使用CLI 命令时，会显示 `defaultProject`名字</code></pre></li></ul></li><li><p>browserslist<br>维持浏览器兼容性的一个文件。比如&gt;0.5% 只支持市场占有大于0.5%的浏览器，小于就不支持；not IE 9-11，就是不支持IE 9-11 版本等等</p></li><li><p>karma.conf.js<br>单元测试的配置文件，使用Angular + Karma + Jasmine可以进行前端的单体测试</p></li><li><p>package.json<br>任何一个NPM 软件包都会有的一个约束文件，主要为以下几部分：</p><pre><code>      - name      - version      - scripts            1. scripts 属性是一个包含包运行时生命周期各个环节需要执行的脚本命令，key就是生命周期时间，value是运行时节点执行的命令      - dependencies      - devDependencies</code></pre><ol><li> dependencies 和 devDependencies 有些区别，前者是导入引用的包，而后者是开发的时候需要用到，运行时并不需要的包。比如Typescript，在开发时是需要的，编译会把typescript编译成Javascript。所以，在添加直接引用的时候，命令行如：<code>npm i --save @angular/core</code>。如果要添加开发依赖包，命令行如：<code>npm i --save-dev @types/node</code></li><li>依赖包的版本，三位数分别是”大版本号“.”小版本号”.”补丁版本号”。</li><li>版本号前面还会出现 ”<del>“ 或者 ”^“，”</del>“代表至少保证版本号的前两位是一样的，至于补丁版本号可随意，每次安装时一般安装最新的补丁版本号。”^“ 是锁定大版本号，后两位版本号安装时也是安装最新版本号。那如果版本号前面什么都没有，那就表示严格安装指定版本</li></ol></li><li><p>package-lock.json<br>锁定直接依赖包中的每一个依赖包的各自依赖包，在换pc 或新的下载源时，按package-lock.json中的指定版本下载</p></li><li><p>README.md<br>Markdown格式的文档,对项目的简介</p></li><li><p>tsconfig.json</p></li><li><p>tsconfig.app.json</p></li><li><p>tsconfig.spec.json</p><ol><li>tsconfig这三个文件都是对typescript的配置文件。比如typescript最终要编译成Javascript，那需要指定编译的目标格式，路径等</li><li>tsconfig.json 是全局性的Typescript的配置，tsconfig.app.json和tsconfig.spec.json 都继承自tsconfig.json。</li><li>tsconfig.app.json 是针对项目开发时的配置</li><li>tsconfig.spec.json是针对项目测试的配置</li></ol></li><li><p>tslint.json</p><ol><li>tslint.json 是用来做静态代码扫描的，一般在代码编译时会检查代码格式，或不符合最佳实践的会扫描出来，所以这个文件是用来定义规则的。</li><li>比如quotemark 要求是单引号，typescript是支持单引号或双引号的，但是如果指定了单引号，而写双引号，那么就会有绿色的波浪线表明格式不对。虽然编译不会出错，但不符合代码格式要求</li><li>可以使用<code>ng lint</code>对整个代码进行扫描，可输出哪些代码不符合规范<br><img src="/2020/04/29/Angular/Angular8%20Tutorial/Angular8%20Tutorial-5-Angular%20Cli/4.png" alt="image.png"></li></ol></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> Frontend </tag>
            
            <tag> Angular8 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Angular8 实战（四）开发工具配置</title>
      <link href="/2020/04/29/Angular/Angular8%20Tutorial/Angular8%20Tutorial-4-Vscode%20Configuration/"/>
      <url>/2020/04/29/Angular/Angular8%20Tutorial/Angular8%20Tutorial-4-Vscode%20Configuration/</url>
      
        <content type="html"><![CDATA[<p>前端IDE很多，我个人推荐使用<a href="%5Bhttps://code.visualstudio.com/%5D(https://code.visualstudio.com/)">VSCode</a>, 开源、免费、轻量、跨平台等优点，使得越来越多的人选择使用VsCode。</p><h2 id="VsCode-界面简介"><a href="#VsCode-界面简介" class="headerlink" title="VsCode 界面简介"></a>VsCode 界面简介</h2><p>我的VsCode界面是我已经设置过的，刚安装完并不是这样的。但是功能项是不变的。</p><ol><li>显示当前打开的所有文件，当然横着的tab也可以看到，但是多了可能显示不全，所以从这边看打开的页面非常方便</li><li>当前打开的项目文件夹及文件夹中的内容（一般是Angular项目的根目录）</li><li>大纲，显示当前聚焦页面的类、属性、方法等，可快速查找当前页面内容</li><li>时间轴，显示当前聚焦页面的提交记录，若是用了github，azure devops等代码托管即可看出当前文件的所有提交记录</li><li>显示当前项目的npm 脚本</li><li>输出栏，一般调试的时候使用较多</li><li>终端，项目的安装、运行、创建等都在此执行</li><li>调试时会使用，像vs一样，设断点，启动跟踪模式</li><li>打开终端，执行任务等命令</li><li>全文检索，输入关键字，会整个项目文件夹中查找。如果想在当前聚焦的文件查找，则使用3的快速查找。或者快捷键Ctrl+F，调出搜索框</li><li>当前分支下修改的文件。如果是托管代码，可在左下角查看当前代码所在分支</li><li>执行，一般会在debug时使用</li><li>插件集合，可查看已安装的插件，和系统推荐的插件，一键安装。</li><li>设置，打开可设置VsCode主题，字体，样式，自动格式化等等，非常丰富的设置项。<br><img src="/2020/04/29/Angular/Angular8%20Tutorial/Angular8%20Tutorial-4-Vscode%20Configuration/1.png" alt="image.png"></li></ol><h2 id="常用插件推荐"><a href="#常用插件推荐" class="headerlink" title="常用插件推荐"></a>常用插件推荐</h2><ul><li>Debugger for Chrome<br>顾名思义，debug 代码用的。让 vscode 映射 chrome 的 debug功能，静态页面都可以用 vscode 来打断点调试</li><li>Html css support<br>让 html 标签上写class 智能提示当前项目所支持的样式</li><li>Angular8 Snippets / Html Snippets<br>代码片段提示</li><li>Angular Language service<br>让你能在 Angular 模板内获得自动完成、错误检查、给出提示和内部导航等功能，而不用管这些模板位于外部 HTML 文件中还是内嵌在注解/装饰器的字符串中。 Angular 语言服务会自动检测你要打开的 Angular 文件（从你的 tsconfig.json 中读取），找出应用中所需的所有模板，然后为你打开的这些模板提供语言服务。</li><li>vscode-icons<br>让 vscode 资源树目录加上图标，使用感不错！</li></ul><h2 id="Chrome-开发工具"><a href="#Chrome-开发工具" class="headerlink" title="Chrome 开发工具"></a>Chrome 开发工具</h2><ul><li>前端调试，浏览器推荐Chrome或者Edge。不怎么推荐Firefox，IE等。一般快捷键都是F12可调出开发者模式，前端开发调试时，使用率相当高，可调样式，可看Console输出，可直接Debug，可在network中查看请求（方便调试API），可看performance</li><li>当然Chrome也可像VsCode一样安装插件，方便调试。如：Augury<br><img src="/2020/04/29/Angular/Angular8%20Tutorial/Angular8%20Tutorial-4-Vscode%20Configuration/2.png" alt="image.png"></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> Frontend </tag>
            
            <tag> Angular8 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Angular8 实战（三）环境搭建</title>
      <link href="/2020/04/29/Angular/Angular8%20Tutorial/Angular8%20Tutorial-3-Setup%20environment/"/>
      <url>/2020/04/29/Angular/Angular8%20Tutorial/Angular8%20Tutorial-3-Setup%20environment/</url>
      
        <content type="html"><![CDATA[<p>Angular 环境搭建：<br>Node &gt;&gt; NPM/CNPM &gt;&gt; Angular CLI</p><h2 id="Node-js"><a href="#Node-js" class="headerlink" title="Node.js"></a><a href="https://nodejs.org/en/download/">Node.js</a></h2><ul><li>安装node.js的目的是使用npm管理项目依赖的软件包(简单理解就是项目依赖的类库)<h2 id="NPM-CNPM"><a href="#NPM-CNPM" class="headerlink" title="NPM/CNPM"></a>NPM/CNPM</h2></li><li>传统项目依赖的软件包，通常是先下载到本地，再引用到项目中。而这其中就有问题，比如：项目依赖A,B,C 三个软件包，但是B又依赖 E,F 两个软件包，E 又依赖的M,N两个软件包，这就导致我们的维护工作非常的不便。再者，之后的升级工作也会非常的繁琐。</li><li>而NPM 提供了一个很好的方式，我们只需要在配置文件中配置我们所需要的软件包，NPM会统一从中心站点下载所需的软件依赖包安装到本地，并且NPM会自己处理好软件包各自的依赖项。*(中心站点指的是npm 软件包会一般会统一上传到一个中心站点，方便其他人下载使用)*</li><li>CNPM，由于网络环境等原因，NPM 一般访问速度会很慢。为了解决这个问题，CNPM作为替代的包管理工具就出现了。CNPM是淘宝团队针对NPM中心站点在大陆做的一个镜像。使用CNPM 可以快速安装依赖包，提升开发体验。就个人而言，建议大家能用NPM的情况下尽量使用NPM。因为CNPM可能会安装到版本较旧的包，引发一些诡异的错误。<h2 id="Angular-CLI"><a href="#Angular-CLI" class="headerlink" title="Angular CLI"></a>Angular CLI</h2></li><li>Angular CLI 简称脚手架，其实是一个命令行工具。使用Angular CLI 使我们无须理会复杂的配置，更专注Angular。这其实是前端的一个趋势，比如React，React也有自己的命令行工具；Vue，Vue也有Vue CLI 都是相同的思路，屏蔽掉复杂的配置，着重在框架本身。</li></ul><h2 id="简单安装步骤"><a href="#简单安装步骤" class="headerlink" title="简单安装步骤"></a>简单安装步骤</h2><ul><li><p>Node.js &amp; npm<br><em>1. Nodejs官网下载LTS版本，双击安装，全部Next，直到安装成功</em><br><em>2. 运行cmd, 输入node-v 确认nodejs 版本；输入npm -v 确认npm 版本</em><br><em>3. 配置npm 和 nodejs 环境变量</em><br><em>4. 配置源地址</em></p></li><li><p>Typescript<br><em>1. 运行cmd, 输入npm install -g typescript</em><br><em>2. 输入tsc -v查看typescript 版本</em></p></li><li><p>Angular CLI<br><em>1. 运行cmd, 输入npm install -g @angular/cli，如果需要指定版本，则如：npm install -g @angular/<a href="mailto:cli@8.3.12">cli@8.3.12</a></em><br><em>2. 输入ng –version查看Angular CLI安装版本</em></p></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> Frontend </tag>
            
            <tag> Angular8 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Angular8 实战（二）Angular基础框架</title>
      <link href="/2020/04/29/Angular/Angular8%20Tutorial/Angular8%20Tutorial-2-Angular%20Framework/"/>
      <url>/2020/04/29/Angular/Angular8%20Tutorial/Angular8%20Tutorial-2-Angular%20Framework/</url>
      
        <content type="html"><![CDATA[<p>一张图说明Angular的基础框架，下面是一些重要的点：</p><ol><li>组件作为最小渲染单元，组件的模板可以进行事件绑定和处理，这个操作是在组件类种完成；同样组件中的属性可以通过指令绑定到组件模板中，使得组件模板中有更多的功能</li><li>逻辑处理一般封装在服务中，组件通过依赖注入去使用服务</li><li>模块作为Angular中最小的功能架构组织，这个模块中有自己的服务、指令、组件等<br><img src="/2020/04/29/Angular/Angular8%20Tutorial/Angular8%20Tutorial-2-Angular%20Framework/1.png" alt="image.png"></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> Frontend </tag>
            
            <tag> Angular8 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Angular8 实战（一）为什么选择Angular？</title>
      <link href="/2020/04/29/Angular/Angular8%20Tutorial/Angular8%20Tutorial-1-Why%20Angular/"/>
      <url>/2020/04/29/Angular/Angular8%20Tutorial/Angular8%20Tutorial-1-Why%20Angular/</url>
      
        <content type="html"><![CDATA[<h2 id="为什么要学习Angular？"><a href="#为什么要学习Angular？" class="headerlink" title="为什么要学习Angular？"></a>为什么要学习Angular？</h2><p>前端技术各有千秋，为什么要选择Angular呢？下面我们从几个方面来的比较一下。</p><h2 id="框架层面"><a href="#框架层面" class="headerlink" title="框架层面"></a>框架层面</h2><ol><li><p>和Vue、React相比，Angular其实更称得上是一个框架，因为后两者更多意义上倾向于视图这样层面的比较轻量级的类库。但是Angular，它是一个一站式的前端开发框架。<br><img src="/2020/04/29/Angular/Angular8%20Tutorial/Angular8%20Tutorial-1-Why%20Angular/1.png" alt="image.png"></p></li><li><p>它从模块、服务、组件、路由、表单、响应式开发等都给你提供好，是一个开箱即用的框架。也就是说它并不需要依赖很多第三方的开源类库，也不需要去比较这些开源类库中的优缺点，因为官方内置已经给你提供了这些功能。<br><img src="/2020/04/29/Angular/Angular8%20Tutorial/Angular8%20Tutorial-1-Why%20Angular/2.png" alt="image.png"><br>####语言层面<br>很多前端框架像Vue，React都在用Typescript，Angular是所有主流前端开发框架中最早拥抱<a href="https://www.typescriptlang.org/">Typescript</a>。它采用Typescript作为开发语言，提供了大型项目所必须的这种类型约束。从目前来看，虽然React和Vue也支持了Typescript，但是从集成程度来看，Angular是这些框架中对Typescript最友好的，也是最方便的。目前，Typescript已经成为未来前端框架的标配。所以，最早拥抱Typescript的Angular，在这一方面有很大的优势。<br><img src="/2020/04/29/Angular/Angular8%20Tutorial/Angular8%20Tutorial-1-Why%20Angular/3.png" alt="image.png"></p></li></ol><h2 id="项目层面"><a href="#项目层面" class="headerlink" title="项目层面"></a>项目层面</h2><p>从项目层面上来说，大型项目需要处理非常复杂的逻辑，而这些逻辑中大部分是一些异步操作，而Angular深度的集成了Rxjs，用Rxjs来支持对逻辑和异步响应式编程，这种响应式的编程使得逻辑和异步的处理非常自然、简单。另外，大型项目中需要复杂的表单，对于表单中字段的约束和验证，通常意义上来说也是复杂的。但是Angular提供了非常好的机制来验证约束表单。还有，大型的项目都需要很好的文件结构和编码规范，这些Angualr从框架层面上也都全部提供了。<br><img src="/2020/04/29/Angular/Angular8%20Tutorial/Angular8%20Tutorial-1-Why%20Angular/4.png" alt="image.png"></p><h2 id="生态层面"><a href="#生态层面" class="headerlink" title="生态层面"></a>生态层面</h2><p>在生态层面上，Google和微软都是站在Angular背后的，支持Angular框架。Google很好理解，Angular本身就是Google开发的。而微软呢，提供了Anuglar底层的两大基础设施：Tyepscript，Rxjs。有Google和微软两大巨头站在背后，Angular的生态还是非常稳固的。<br><img src="/2020/04/29/Angular/Angular8%20Tutorial/Angular8%20Tutorial-1-Why%20Angular/5.png" alt="image.png"></p>]]></content>
      
      
      
        <tags>
            
            <tag> Frontend </tag>
            
            <tag> Angular8 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Angular8 实战集</title>
      <link href="/2020/04/29/Angular/Angular8%20Tutorial/Angular8%20Tutorial-0-Overview/"/>
      <url>/2020/04/29/Angular/Angular8%20Tutorial/Angular8%20Tutorial-0-Overview/</url>
      
        <content type="html"><![CDATA[<p>本实战集主要是通过高仿拼多多WebApp带你在实战环境中学习Angular8<br>以模块化开发方式，实现一个个小模块，再串成完整项目，让你看到项目由小及大的整个成型过程，并进行Http联调。</p><h2 id="目录列表"><a href="#目录列表" class="headerlink" title="目录列表"></a>目录列表</h2><ul><li>Angular8 实战（一）为什么选择Angular？</li><li>Angular8 实战（二）Angular基础框架</li><li>Angular8 实战（三）环境搭建</li><li>Angular8 实战（四）开发工具配置</li><li>Angular8 实战（五）CLI 工程结构</li><li>Angular8 实战（六）工程源码文件结构</li><li>Angular8 实战（七）【初识组件】顶部TabBar</li><li>Angular8 实战（八）【接口Interface Flex布局】让顶部导航滚动</li><li>Angular8 实战（九）【ngFor指令 事件的处理和样式绑定】顶部导航支持选中状态</li><li>Angular8 实战（十）【组件封装】分离封装第一个组件</li><li>Angular8 实战（十一）【ngIf 指令 组件的输入输出】组件的输入和输出属性</li><li>Angular8 实战（十二）样式绑定的几种方式</li><li>Angular8 实战（十三）组件生命周期（1）</li><li>Angular8 实战（十四）组件生命周期（2）</li><li>Angular8 实战（十五）在组件类中引用模板</li><li>Angular8 实战（十六）在模板中引用多个元素</li><li>Angular8 实战（十七）轮播图组件</li><li>Angular8 实战（十八）组件的双向绑定</li><li>Angular8 实战（十九）模块的概念</li><li>Angular8 实战（二十）模块的划分</li><li>Angular8 实战（二十一）什么是注解</li><li>Angular8 实战（二十二）指令的概念（1）</li><li>Angular8 实战（二十三）指令的概念（2）</li><li>Angular8 实战（二十四）组件的事件绑定和样式绑定</li><li>Angular8 实战（二十五）组件的嵌套和投影组件（1）</li><li>Angular8 实战（二十六）组件的嵌套和投影组件（2）</li><li>Angular8 实战（二十七）路由概念</li><li>Angular8 实战（二十八）路由实战</li><li>Angular8 实战（二十九）路由URL和参数（1）</li><li>Angular8 实战（三十）路由URL和参数（2）</li><li>Angular8 实战（三十一）路由URL和参数（3）</li><li>Angular8 实战（三十二）管道讲解</li><li>Angular8 实战（三十三）依赖注入（1）</li><li>Angular8 实战（三十四）依赖注入（2）</li><li>Angular8 实战（三十五）脏值检测（1）</li><li>Angular8 实战（三十六）脏值检测（2）</li><li>Angular8 实战（三十七）脏值检测（3）</li><li>Angular8 实战（三十八）HTTP概览</li><li>Angular8 实战（三十九）Postman和Rest Client调式HTTP</li><li>Angular8 实战（四十）Rest API</li><li>Angular8 实战（四十一）HttpClient修改</li><li>Angular8 实战（四十二）Http拦截器 HttpInterceptor</li><li>Angular8 实战（四十三）Rxjs初步了解</li><li>Angular8 实战（四十四）操作符和Async管道</li><li>Angular8 实战（四十五）使用Rxjs打造倒计时组件</li><li>Angular8 实战（四十六）创建底部TabBar（1）</li><li>Angular8 实战（四十七）创建底部TabBar（2）</li><li>Angular8 实战（四十八）底部TabBar切换路由</li><li>Angular8 实战（四十九）使用Rxjs高阶操作符添加广告位</li><li>Angular8 实战（五十）创建垂直网络组件</li><li>Angular8 实战（五十一）创建产品卡片组件（1）</li><li>Angular8 实战（五十二）创建产品卡片组件（2）</li><li>Angular8 实战（五十三）实战产品瓷砖组件</li><li>Angular8 实战（五十四）实战后退按钮组件</li><li>Angular8 实战（五十五）实现商品画廊（1）</li><li>Angular8 实战（五十六）实现商品画廊（2）</li><li>Angular8 实战（五十七）实战拼单列表</li><li>Angular8 实战（五十八）实战对话框（1）</li><li>Angular8 实战（五十九）实战对话框（2）</li><li>Angular8 实战（六十）实战对话框（3）</li><li>Angular8 实战（六十一）实战拼单选择产品对话框（1）</li><li>Angular8 实战（六十二）实战拼单选择产品对话框（2）</li><li>Angular8 实战（六十三）实战确认订单（1）</li><li>Angular8 实战（六十四）实战确认订单（2）</li><li>Angular8 实战（六十五）实战个人信息</li><li>Angular8 实战（六十六）发布上线-环境，重定向</li><li>Angular8 实战（六十七）发布上线-gzip和跨域</li><li>Angular8 实战（六十八）路由懒加载的改造</li><li>Angular8 实战（六十九）Ivy渲染引擎</li><li>Angular8 实战（七十）课程总结</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> Frontend </tag>
            
            <tag> Angular8 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Node-RED 系列(1)-Install</title>
      <link href="/2020/04/28/Node-RED/Node-RED-1-Install/"/>
      <url>/2020/04/28/Node-RED/Node-RED-1-Install/</url>
      
        <content type="html"><![CDATA[<p>Premises: Nodejs</p><h2 id="Steps-to-install-Node-js"><a href="#Steps-to-install-Node-js" class="headerlink" title="Steps to install Node.js"></a>Steps to install Node.js</h2><ol><li><p>Download install from the <a href="https://nodejs.org/en/">Node.js</a> web site. LTS is recommended. </p></li><li><p>Run the installer you downloaded</p></li><li><p>Follow the prompts in the installer</p><ul><li>Accept the license agreement</li><li>click the NEXT button a bunch of times and accept the default installation settings<br><img src="/2020/04/28/Node-RED/Node-RED-1-Install/nodejs-install.png" alt="Node-RED Install"></li></ul><p> <em><strong>Information</strong></em><br> <em>Restart your computer. You won’t be able to run Node.js until you restart your computer.</em></p></li><li><p>Test it !</p><ul><li>Make sure you have Node installed by running simple commands to see what version is installed:</li><li>Test Node. To see if Node is installed, open the Windows Command Prompt, Powershell or a similar command line tool, and type&nbsp;<code>node --version &amp;&amp; npm --version</code>.&nbsp;This should print the version number so you should receive back output that looks similar to:</li></ul></li></ol><p><img src="/2020/04/28/Node-RED/Node-RED-1-Install/node-version-check.png" alt="node-version-check"></p><h2 id="Steps-to-install-Node-RED"><a href="#Steps-to-install-Node-RED" class="headerlink" title="Steps to install Node-RED"></a>Steps to install Node-RED</h2><p>This chapter gives specific instructions on setting up Node-RED in a Microsoft Windows environment. The instructions are specific to Windows 10 but should also work for windows7 and Windows Server from 2008R2.<br>It is not advisable to use versions prior to Windows 7 or Windows Server 2008R2</p><p><em><strong>Information</strong></em><br><em>Firstly set registry or proxy to use npm to download and install packages</em></p><ol><li><p>Install Node-RED</p><ul><li>Installing Node-RED as a global module adds the command node-red to your system path.</li><li>Execute the following at the command prompt:  <pre class="line-numbers language-none"><code class="language-none">npm install –g –unsafe-perm node-red<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul></li><li><p>Run Node-RED</p><ul><li>Once installed, the simple way to run Node-RED is to use the node-red command in a command prompt: if you have installed Node-RED as a global npm package, you can use the node-red command:  <pre class="line-numbers language-none"><code class="language-none">node-red<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul></li><li><p>Open browser, input localhost:1880 to go to the Node-Red flow page<br><img src="/2020/04/28/Node-RED/Node-RED-1-Install/node-red-flow.png" alt="node-red-flow"></p></li><li><p>Open browser, input localhost:1880/ui to go the Node-Red Dashboard page<br><img src="/2020/04/28/Node-RED/Node-RED-1-Install/node-red-ui.png" alt="node-red-ui"></p></li></ol><p><em><strong>Information</strong></em><br><em>You must keep the terminal open in order to keep Node-RED running. And if you want to always keep Node-Red running, using PM2</em><br><em><a href="">Node-RED 系列（8）– Using PM2 to keep Node-RED running on Windows</a></em></p>]]></content>
      
      
      
        <tags>
            
            <tag> Node-RED </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Node-RED 系列</title>
      <link href="/2020/04/28/Node-RED/Node-RED-0-Overview/"/>
      <url>/2020/04/28/Node-RED/Node-RED-0-Overview/</url>
      
        <content type="html"><![CDATA[<p>Node-RED系列文章通过循序渐进的方式讲解一下Node-RED的初级使用到一些高级的功能。<br>本系列文章都收集在我自己的Node-RED专集中，暂定的目录也可能会更改，所以如果有需要的话可以关注一下Node-RED专集。</p><p><em>因为本人在外企工作，为了锻炼英文书写能力，故而后续的文章内容基本上都是英文书写。如果因为我超烂的英文水平而不明白的地方，可以留言，我会及时回复。抱歉哈~</em></p><p>####目录列表</p><ul><li>Node-RED 系列</li><li><a href="https://paria7.github.io/2020/04/28/Node-RED/Node-RED-1-Install/">Node-RED 系列（1）– Install</a></li><li><a href="https://www.jianshu.com/p/aeeaac4ae638">Node-RED 系列（2）– Creating your first flow</a></li><li><a href="https://www.jianshu.com/p/273ac8574fb2">Node-RED 系列（3）– Core nodes (Inject/Debug/Function)</a></li><li><a href="https://www.jianshu.com/p/67f3d46c7b96">Node-RED 系列（4）– Core nodes (Change/Switch/Json)</a></li><li>Node-RED 系列（5）– Core nodes (Template/Split/Join)</li><li>Node-RED 系列（6）– Core nodes (Http In/Http Request)</li><li><a href="https://www.jianshu.com/p/e549ea7a7b6b">Node-RED 系列（7）– Oauth/OpenID based authentication with Id4</a></li><li><a href="https://www.jianshu.com/p/b1d23ee82296">Node-RED 系列（8）– Using PM2 to keep Node-RED running on Windows</a></li><li>Node-RED 系列（9）– Subflows</li><li>Node-RED 系列 （10）– how to copy nodes and flows</li><li>Node-RED 系列（11）– CSV Node</li><li>Node-RED 系列（12）– How to read and write data to a file</li><li>Node-RED 系列（13）– Global Variables</li><li>Node-RED 系列（14）– Invoke API &amp; export to API</li><li>Node-RED 系列（15）– Receive data from Kafka</li><li>Node-RED 系列（16）– Send data to RabbitMQ</li><li>Node-RED 系列（17）– Store data to database</li><li>…</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> Node-RED </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
