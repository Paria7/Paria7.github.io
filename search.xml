<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>test</title>
      <link href="/2021/10/02/test/"/>
      <url>/2021/10/02/test/</url>
      
        <content type="html"><![CDATA[<p>hahahaha</p><p>haha</p><p>jahaha</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Chapter1 We are introduced to the narrotor, a pilot, and his ideas about grown-ups</title>
      <link href="/2021/10/02/Books/English/The%20Little%20Prince/Chapter2/"/>
      <url>/2021/10/02/Books/English/The%20Little%20Prince/Chapter2/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
        <tags>
            
            <tag> Book </tag>
            
            <tag> English </tag>
            
            <tag> The Little Prince </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Chapter1</title>
      <link href="/2021/10/02/Books/English/Animal%20Farm/Chapter1/"/>
      <url>/2021/10/02/Books/English/Animal%20Farm/Chapter1/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
        <tags>
            
            <tag> Book </tag>
            
            <tag> English </tag>
            
            <tag> Animal Farm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Chapter1 We are introduced to the narrotor, a pilot, and his ideas about grown-ups</title>
      <link href="/2021/10/02/Books/English/The%20Little%20Prince/Chapter1/"/>
      <url>/2021/10/02/Books/English/The%20Little%20Prince/Chapter1/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
        <tags>
            
            <tag> Book </tag>
            
            <tag> English </tag>
            
            <tag> The Little Prince </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2021/10/02/hello-world/"/>
      <url>/2021/10/02/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo generate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo deploy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Node-RED 系列（11）-- how to copy nodes and flows</title>
      <link href="/2020/04/29/Node-RED/Node-RED-11-Copy-nodes-and-flows/"/>
      <url>/2020/04/29/Node-RED/Node-RED-11-Copy-nodes-and-flows/</url>
      
        <content type="html"><![CDATA[<p>There a several ways that you can copy nodes and flows between flows.</p><p>They are:</p><ul><li>Select Copy and Paste</li><li>Export and Import Clipboard</li><li>Save to and Retrieve from the local library</li></ul><h2 id="Select-Copy-and-Paste"><a href="#Select-Copy-and-Paste" class="headerlink" title="Select Copy and Paste"></a>Select Copy and Paste</h2><p>Just select the nodes that you want to copy then <code>control + C</code> and <code>control + V</code>.<br><img src="/2020/04/29/Node-RED/Node-RED-11-Copy-nodes-and-flows/11-1.gif" alt="11-1.gif"></p><h2 id="Export-and-Import-Clipboard"><a href="#Export-and-Import-Clipboard" class="headerlink" title="Export and Import Clipboard"></a>Export and Import Clipboard</h2><p>Just select the nodes that you want to export and click the export and then open a text to store the flow on the clipboard with the flow as its file extension. After this, I can take that text document and I can install it on another node-red installation on another computer. It’s a very good way of exporting your flows to other computers to other users.<br><img src="/2020/04/29/Node-RED/Node-RED-11-Copy-nodes-and-flows/11-2.gif" alt="11-2.gif"></p><p>To get a flow that’s been exported into your node-red flow, all you do is use the opposite which is the import. Go to import and import from the clipboard. Open the text document then copy the stored flow to the clipboard and import.<br><img src="/2020/04/29/Node-RED/Node-RED-11-Copy-nodes-and-flows/11-3.gif" alt="11-3.gif"></p><h2 id="Save-to-and-Retrieve-from-the-local-library"><a href="#Save-to-and-Retrieve-from-the-local-library" class="headerlink" title="Save to and Retrieve from the local library"></a>Save to and Retrieve from the local library</h2><p>The third method is by using the library. Using the library you can actually copy flows and you can also copy individual functions. We’re going to look at doing both. </p><p>Just select the nodes and then go to export and this time I’m exporting into the library not clipboard. And I need to give it a name, I can also give it a subdirectory. By default, they’re stored in the library folder. The flows are stored in a subfolder called flows and the functions in a subfolder called functions.</p><p>The main difference between exporting it to the library or exporting it to the clipboard and then to a text file is the library used when you want to reuse the flows and functions on the same machine. The clipboard and the file issues when you actually want to transfer the two flows to a different machine or a different user.</p><p><em>flows</em><br><img src="/2020/04/29/Node-RED/Node-RED-11-Copy-nodes-and-flows/11-4.gif" alt="11-4.gif"></p><p><em>fuctions</em><br>If you want to override the function in the libraries, just open the function and edit it and then save it as the same file. It will override the original one. It’s important to realize that once you’ve imported the function into the function node then it’s stored in that function node. If you go back and change the library, the function in the library doesn’t actually change the  one you’ve already imported into a flow. So you’d have to re-import it back into the flow if you wanted to pick up the changes in the library that you’ve made.<br><img src="/2020/04/29/Node-RED/Node-RED-11-Copy-nodes-and-flows/11-5.gif" alt="11-5.gif"></p><p>In the end, this is the node-red directory on my machine, and you can see the lib folder, go to folder you can see those two folders there one called flows one called functions. They were created by the system.<br><img src="/2020/04/29/Node-RED/Node-RED-11-Copy-nodes-and-flows/11-6.gif" alt="11-6.gif"></p>]]></content>
      
      
      
        <tags>
            
            <tag> Node-RED </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Node-RED 系列（10）-- Subflows</title>
      <link href="/2020/04/29/Node-RED/Node-RED-10-Subflows/"/>
      <url>/2020/04/29/Node-RED/Node-RED-10-Subflows/</url>
      
        <content type="html"><![CDATA[<p>In this article, we will learn about how to create and use Node-RED subflows.<br>A subflow is a collection of connected nodes that can be used as a single unit just like a node.<br>It is a way of packaging functionality from several nodes into a single node.</p><h2 id="Creating-Subflows"><a href="#Creating-Subflows" class="headerlink" title="Creating Subflows"></a>Creating Subflows</h2><p>You can create a subflow in two ways:</p><ul><li>An empty subflow<br><img src="/2020/04/29/Node-RED/Node-RED-10-Subflows/create-empty-subflow.png" alt="create an empty subflow"></li></ul><p><strong>Notice:</strong> you cannot put the input and output node inside the subflows, otherwise, you cannot reuse it as a functionality node.</p><p>If you want to delete the subflow, then double click the subflow and click the delete button<br><img src="/2020/04/29/Node-RED/Node-RED-10-Subflows/delete-subflow.png" alt="delete subflow"></p><ul><li>Selecting nodes from an existing flow<br><img src="/2020/04/29/Node-RED/Node-RED-10-Subflows/existing-subflow.gif" alt="existing subflow"></li></ul><p><strong>Notice:</strong> Be careful if you want to change the subflow, because it will affects any flow that’s actually using this subflow not just the one you’re currently working on.</p><h2 id="Difference-between-subflow-and-link-node"><a href="#Difference-between-subflow-and-link-node" class="headerlink" title="Difference between subflow and link node"></a>Difference between subflow and link node</h2><p>There are some differences between subflow and link node.<br>There are two cases about the link node. A link out node wired to link in node in a same tab and a different tab.<br>| Condition | Subflow |  Link node(same tab) | Link node(different tab) |<br>| :——— | :——- | :——– | :——- |<br>| Share context.flow  | NO  | YES    |    No        |<br>| Share context.global | YES | YES | YES |<br>| Catch error in caller tab | YES | YES | NO |<br>| Node actions(e.g. inject node) | NO | YES | YES |</p>]]></content>
      
      
      
        <tags>
            
            <tag> Node-RED </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Node-RED 系列（9）-- Using PM2 to keep Node-RED running on Windows</title>
      <link href="/2020/04/29/Node-RED/Node-RED-9-PM2/"/>
      <url>/2020/04/29/Node-RED/Node-RED-9-PM2/</url>
      
        <content type="html"><![CDATA[<h2 id="Node-RED-running-on-Windows"><a href="#Node-RED-running-on-Windows" class="headerlink" title="Node-RED running on Windows"></a>Node-RED running on Windows</h2><p>Once installed, the simple way to run Node-RED is to use the <strong>node-red</strong> command in a command prompt. If you have installed Node-RED as a global npm package, you can use the node-red command:<br><img src="/2020/04/29/Node-RED/Node-RED-9-PM2/node-red.png" alt="node-red"><br>This will output the Node-RED log to the terminal. You must keep the terminal open in order to keep Node-RED running.</p><h2 id="Why-using-PM2"><a href="#Why-using-PM2" class="headerlink" title="Why using PM2"></a>Why using PM2</h2><p>If you are using Windows to develop Node-Red flows or nodes, you may find it helpful to use <strong><a href="https://pm2.keymetrics.io/">PM2</a></strong> to run Node-RED. This can be configured to automatically restart when files change, always keep Node-RED running and manage log output.</p><p>PM2 is a process manager for Node applications with monitoring, load balancing, automatic restart etc.<br>And it’s perfect when you want to take your individual code and use all the CPUs on all the servers and keep the process alive forever.</p><h2 id="Steps-to-using-PM2-to-keep-Node-RED-running-on-Windows"><a href="#Steps-to-using-PM2-to-keep-Node-RED-running-on-Windows" class="headerlink" title="Steps to using PM2 to keep Node-RED running on Windows"></a>Steps to using PM2 to keep Node-RED running on Windows</h2><ol><li><p>Install PM2<br> Execute the following at the command prompt:<br> <code>npm install –g –unsafe-perm pm2</code><br><img src="/2020/04/29/Node-RED/Node-RED-9-PM2/install-pm2.png" alt="pm2 install"></p></li><li><p>Install and config pm2-windows-service<br> Execute the following at the command prompt:<br> <code>npm i –g pm2-windows-service</code><br><img src="/2020/04/29/Node-RED/Node-RED-9-PM2/install-pm2-windows.png" alt="install pm2 windows service"></p></li><li><p>Add environment variables for PM2<br><img src="/2020/04/29/Node-RED/Node-RED-9-PM2/configure-pm2-environment-variable.png" alt="setting environment variable"></p></li><li><p>Install PM2 Service<br> Open command line as administrator and execute below command<br> <code>pm2-service-install</code><br> <em>Tips: choose ‘N’ and continue, and then PM2 service install successfully</em><br><img src="/2020/04/29/Node-RED/Node-RED-9-PM2/pm2-service-install.png" alt="install pm2 service"><br><img src="/2020/04/29/Node-RED/Node-RED-9-PM2/pm2-service.png" alt="pm2 service"></p></li><li><p>Locate the Node-RED red.js File and add it to PM2<br> Execute the following at the command prompt:<br> <code>pm2 start C:\Users\[replace with your user folder]\AppData\Roaming\npm\node_modules\node-red\red.js –n node-red</code><br><img src="/2020/04/29/Node-RED/Node-RED-9-PM2/pm2-start.png" alt="pm2 start"></p></li><li><p>Save configuration<br> Execute the following at the command prompt:<br> <code>pm2 save</code><br><img src="/2020/04/29/Node-RED/Node-RED-9-PM2/pm2-save.png" alt="pm2 save"></p></li><li><p>Check status<br> Execute the following at the command prompt:<br> <code>pm2 status</code><br> <code>pm2 info &lt;id or app name&gt;</code><br> <code>pm2 show &lt;id or app name&gt;</code><br><img src="/2020/04/29/Node-RED/Node-RED-9-PM2/pm2-status.png" alt="pm2 status"></p></li><li><p>Restart pc and check PM2 status<br> <code>pm2 status</code><br><img src="/2020/04/29/Node-RED/Node-RED-9-PM2/pm2-status-restart.png" alt="pm2 status"></p></li></ol><p>That’s all.<br>Hope this can help you!</p>]]></content>
      
      
      
        <tags>
            
            <tag> Node-RED </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Node-RED 系列（8）-- Oauth/OpenID based authentication with Id4Flows</title>
      <link href="/2020/04/29/Node-RED/Node-RED-8-Authentication/"/>
      <url>/2020/04/29/Node-RED/Node-RED-8-Authentication/</url>
      
        <content type="html"><![CDATA[<h1 id="Securing-Node-RED"><a href="#Securing-Node-RED" class="headerlink" title="Securing Node-RED"></a>Securing Node-RED</h1><h2 id="OAuth-OpenID-based-authentication-with-Id4"><a href="#OAuth-OpenID-based-authentication-with-Id4" class="headerlink" title="OAuth/OpenID based authentication with Id4"></a>OAuth/OpenID based authentication with Id4</h2><p>To use an external authentication source, Node-RED can take use a wide range of the strategies provided by <a href="http://www.passportjs.org/">Passport</a>.</p><h3 id="Steps-as-below"><a href="#Steps-as-below" class="headerlink" title="Steps as below:"></a>Steps as below:</h3><ol><li><p>In the node-red installation host, install passport-oauth2 module:<br><img src="/2020/04/29/Node-RED/Node-RED-8-Authentication/install-passport.png" alt="install passport"></p></li><li><p>In your Id4, add new client and remember set the “Client Secret” and add “authorization_code” as allowed grant type</p><ul><li>ClientID</li><li>ClientSecret</li><li>Allowed Grant type (authorization_code)</li><li>redirect url</li></ul></li><li><p>Then add/modify the following in your settings.js<br><img src="/2020/04/29/Node-RED/Node-RED-8-Authentication/configuration.png" alt="configuration"></p></li><li><p>Results as below<br><img src="/2020/04/29/Node-RED/Node-RED-8-Authentication/login-with-authentication.png" alt="login with authentication"></p></li></ol><p>Hope this can help you.</p>]]></content>
      
      
      
        <tags>
            
            <tag> Node-RED </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Node-RED 系列（7）-- Initializing Node-RED Flows</title>
      <link href="/2020/04/29/Node-RED/Node-RED-7-Initializing%20flow/"/>
      <url>/2020/04/29/Node-RED/Node-RED-7-Initializing%20flow/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
        <tags>
            
            <tag> Node-RED </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Node-RED 系列（6）-- Core nodes (Http In/Http Request)</title>
      <link href="/2020/04/29/Node-RED/Node-RED-6-Core-Nodes-4/"/>
      <url>/2020/04/29/Node-RED/Node-RED-6-Core-Nodes-4/</url>
      
        <content type="html"><![CDATA[<h2 id="Http-In"><a href="#Http-In" class="headerlink" title="Http In"></a>Http In</h2><p>Creates an HTTP end-point for creating web services.</p><p><strong>Outputs</strong></p><div><font color="#FF0000">payload</font></div>For a GET request, contains an object of any query string parameters. Otherwise, contains the body of the HTTP request.<div><font color="#FF0000">req</font></div>An HTTP request object. This object contains multiple properties that provide information about the request.- ```body``` - the body of the incoming request. The format will depend on the request.- ```headers``` - an object containing the HTTP request headers. - ```params``` - an object containing any route parameters. - ```cookies``` - an object containing the cookies for the request. - ```files``` - if enabled within the node, an object containing any files uploaded as part of a POST request. <div><font color="#FF0000">res</font></div>An HTTP response object. This property should not be used directly; the ```HTTP Response``` node documents how to respond to a request. This property must remain attached to the message passed to response node.<p>The node will listen on the configured path for requests of a particular type. The path can be fully specified, such as <code>user/</code>, or include named parameters that accept any value, such as <code>/user/:name</code>. When named parameters are used, their actual value in a request can be accessed under <code>msg.req.params</code>.</p><p>For request that include a body, such as a POST or PUT, the contents of the request is made available as <code>msg.payload</code>.</p><p>If the content type of the request can be determined, the body will be parsed to any appropriate type. For example, <code>application/json</code> will be parsed to its JavaScript object representation.</p><p><strong>Note:</strong> this node does not send any response to the request. The follow must include an HTTP Response node to complete the request.</p><p><em>Usage example:</em><br><em>Source:</em></p><h2 id="Http-Request"><a href="#Http-Request" class="headerlink" title="Http Request"></a>Http Request</h2><p>Sends HTTP requests and returns the response.</p><p><strong>Inputs</strong></p><div><font color="#FF0000">url</font></div>If not configured in the node, this optional property sets the url of the request.<div><font color="#FF0000">method</font></div>If not configured in the node, this optional property sets the HTTP method of the request. Must be one of ```GET```, ```PUT```, ```POST```, ```PATCH``` or ```DELETE```.<div><font color="#FF0000">headers</font></div>Sets the HTTP headers of the request.<div><font color="#FF0000">cookies</font></div>If set, can be used to send cookies with the request.<div><font color="#FF0000">payload</font></div>Sent as the body of the request.<div><font color="#FF0000">rejectUnauthorized</font></div>If set to ```false```, allows requests to be made to https sites that use self signed certificates.<div><font color="#FF0000">followRedirects</font></div>If set to ```false``` prevent following Redirect(HTTP 301). ```true``` by default.<div><font color="#FF0000">requestTimeout</font></div>If set to a positive number of milliseconds, will override the globally set ```httpRequestTimeout``` parameter.<p><strong>Outputs</strong></p><div><font color="#FF0000">payload</font></div>The body of the response. The node can be configured to return the body as a string, attempt to parse it as a JSON string or leave it as a binary buffer.<div><font color="#FF0000">statusCode</font></div>The status code of the response, or the error code if the request could not be completed.<div><font color="#FF0000">headers</font></div>An object containing the response headers.<div><font color="#FF0000">responseUrl</font></div>In case any redirects occurred while processing the request, this property is the final redirected url. Otherwise, the url of the original request.<div><font color="#FF0000">responseCookies</font></div>If the response includes cookies, this property is an object of name/value pairs for each cookie.<div><font color="#FF0000">redirectList</font></div>If the request was redirected one or more times, the accumulated information will be added to this property. 'location' is the next destination. 'cookies' is the cookies returned from the redirect souce.<p><em>Usage example:</em><br><em>Source:</em></p>]]></content>
      
      
      
        <tags>
            
            <tag> Node-RED </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Node-RED 系列（5）-- Core nodes (Template/Split/Join)</title>
      <link href="/2020/04/29/Node-RED/Node-RED-5-Core-Nodes-3/"/>
      <url>/2020/04/29/Node-RED/Node-RED-5-Core-Nodes-3/</url>
      
        <content type="html"><![CDATA[<h2 id="Template"><a href="#Template" class="headerlink" title="Template"></a>Template</h2><p>The Template node can be used to generated text using a message’s properties to fill out a template.</p><p>It use the <a href="https://mustache.github.io/mustache.5.html">Mustache</a> templating language to generate the result.</p><p>For example, a template of:</p><pre class="line-numbers language-none"><code class="language-none">This is the payload: {{payload}} !<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>Will replace <code>{{payload}}</code> with the value of the message’s <code>payload</code> property.</p><p>By default, Mustache will replace certain characters with their HTML escape codes. To stop that happening, you can use triple braces: <code>{{{payload}}}</code>.</p><p>Mustache supports simple loops on lists. For example, If <code>msg.payload</code> contains an array of name, such as: <code>["Tom", "Jack", "Tony"]</code>, the following template will create an HTML list of the names:</p><pre class="line-numbers language-none"><code class="language-none">&lt;ul&gt;{{#payload}}  &lt;li&gt;{{.}}&lt;/li&gt;{{/payload}}&lt;/ul&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">&lt;ul&gt;  &lt;li&gt;Tom&lt;/li&gt;  &lt;li&gt;Jack&lt;/li&gt;  &lt;li&gt;Tony&lt;/li&gt;&lt;/ul&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>The node will set the configured message or context property with the result of the template. If the template generates the valid JSON or YAML content, it can be configured to parse the result to the corresponding JavaScript object.</p><p><em>Usage examples:</em></p><p><em>Source</em></p><h2 id="Split"><a href="#Split" class="headerlink" title="Split"></a>Split</h2><p>Split a message into a sequence of messages.</p><p><strong>Inputs</strong></p><div><font color="#FF0000">payload</font></div>The behavior of the node is determined by the type of ```msg.payload```:- **string/buffer** - the message is split using specified character (default: ```\n```), buffer sequence or into fixed lengths.- **array** - the message is split into either individual array elements, or arrays of a fixed-length.- **object** - a message is sent for each key/value pair of the object.<p><strong>Outputs</strong></p><div><font color="#FF0000">parts</font></div>This property contains information about how the message was split from the original message. If passed to the **Join** node, the sequence can be reassembled into a single message. The property has the following properties:- ```id``` - an identifier for the group of messages- ```index``` - the position of the group- ```count``` - if know, the total number of messages in the group. See 'streaming mode' below.- ```type``` - the type of message - string/array/object/buffer- ```ch``` - for a string or buffer, the data used to split the message as either the string or an array of bytes- ```key``` - for an object, the key of the property this message was created from. The node can be configured to also copy this value to another message properties, such as ```msg.topic```- ```len``` - the length of each message when split using a fixed length value<p>This node makes it easy to create a flow that performs common actions across a sequence of messages before, using the <strong>join</strong> node, recombining the sequence into a single message.</p><p>It uses the <code>msg.parts</code> property to track the individual parts of a sequence.</p><p><strong>Streaming mode</strong><br>The node can also be used to reflow a stream of messages. For example, a serial device that sends newline-terminated commands may deliver a single message with a partial command as its end. In ‘Streaming mode’, this node will split a message and send each complete segment. If there is a partial segment at the end, the node will hold on to it and prepend it to the next message that is received.</p><p>When operating in this mode, the node will not set the <code>msg.parts.count</code> property as it does not know how many messages to expect in the stream. This means it cannot be used with the <strong>join</strong> node in its automatic mode.</p><p><em>Usage examples:</em></p><p><em>Source</em></p><h2 id="Join"><a href="#Join" class="headerlink" title="Join"></a>Join</h2><p>Joins sequences of messages into a single message.<br>There are three modes available:</p><ul><li><p><strong>automatic</strong><br>When paired with the <strong>split</strong> node, it will automatically join the messages to reverse the split that was performed.</p></li><li><p><strong>manual</strong><br>Join sequences of message in a variety of ways.</p></li><li><p><strong>reduce sequence</strong><br>Apply an expression against all messages in a sequence to reduce it to a single message.</p></li></ul><p><strong>Inputs</strong></p><div><font color="#FF0000">parts</font></div>To automatically join a sequence of messages, they should all have this property set. The **split** node generates this property but it can be manually created. It has the following properties:- ```id``` - an identifier for the group of messages- ```index``` - the position within the goup- ```count``` - the total number of messages in the group- ```type``` - the type of message - string/array/object/buffer- ```ch``` - for a string or buffer, the data used to split the message as either the string or an array of bytes- ```key``` - for an object, the key of the property this message was created from- ```len``` - the length of each message when split using a fixed length value<div><font color="#FF0000">complete</font></div>If set, the node will append the payload, and then send the output message in its current state. If you don't wish to append the payload, delete it from the msg.<p><em>Usage examples:</em></p><p><em>Source</em></p>]]></content>
      
      
      
        <tags>
            
            <tag> Node-RED </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Node-RED 系列（4）-- Core nodes (Change/Switch/Json)</title>
      <link href="/2020/04/29/Node-RED/Node-RED-4-Core-Nodes-2/"/>
      <url>/2020/04/29/Node-RED/Node-RED-4-Core-Nodes-2/</url>
      
        <content type="html"><![CDATA[<h2 id="Change"><a href="#Change" class="headerlink" title="Change"></a>Change</h2><p>Set, change, delete or move properties of a message, flow context or global context.<br>The node can specify multiple rules that will be applied in the order they are defined.</p><p>The available operations are:</p><div><font color="#FF0000">Set</font></div>set a property. The value can be a variety of different types or can be taken from an existing message or context property.<div><font color="#FF0000">Change</font></div>search &amp; replace parts of the property. If regular expressions are enabled, the "replace with" property can include capture groups, for example ```$1```.Replace will only change the type if there is a complete match.<div><font color="#FF0000">Delete</font></div>delete a property<div><font color="#FF0000">Move</font></div>move or rename a property<p>The “expression” type uses the JSONata query and expression language.</p><p><em>Usage examples:</em></p><h2 id="Switch"><a href="#Switch" class="headerlink" title="Switch"></a>Switch</h2><p>The Switch node allows messages to be routed to different branches of a flow by evaluating a set of rules against each message.</p><p>When a message arrives, the node will evaluate each of the defined rules and forward the message to the corresponding outputs of any matching rules.<br>Optionally, the node can be set to stop evaluating rules once it finds that matches.<br>The rules can be evaluated against an individual message property, a flow or global context property, environment variable or the result of a JSONata expressions.</p><p>There are four types of rule:</p><ol><li><strong>Value</strong> rules are evaluated against the configured property.</li><li><strong>Sequence</strong> rules can be used on message sequences, such as those generated by split node.</li><li>A JSONata <strong>expression</strong> can be provided that will be evaluated against the whole message and will match if the expression returns a true value.</li><li>An <strong>otherwise</strong> rule can be used to match if one of the preceding rules have matched.</li></ol><div><font color="#FF0000">Notes</font></div>The ```is true/false``` and ```is null``` rules perform strict comparisons against those types. They do not convert between types.<p>The <code>is empty</code> and <code>is not empty</code> rules can be used to test the length of String, Arrays and Buffers, or the number of properties an Object has. Neither rule will pass if the property being tested has a <code>boolean</code>, <code>null</code> or <code>undefined</code> value.</p><p>By default, the node does not modify the <code>msg.parts</code> property of messages that are part of a sequence.</p><p>The <strong>recreated message sequences</strong> option can be enabled to generate new message sequences for each rule that matches. In this mode, the node will buffer the entire the incoming sequence before sending the new sequences on. The runtime setting <code>nodeMessageBufferMaxLength</code> can be used to limit how many message nodes will buffer.</p><p><em>Usage examples:</em></p><h2 id="Json"><a href="#Json" class="headerlink" title="Json"></a>Json</h2><p>Converts between a JSON string and its JavaScript object representation, in either direction.</p><p><strong>Inputs</strong></p><div><font color="#FF0000">payload</font></div>A JavaScript object or JSON string.<div><font color="#FF0000">schema</font></div>An optional JSON Schema object to validate the payload against. The property will be deleted before the ```msg``` is sent to the next node.<p><strong>Outputs</strong></p><div><font color="#FF0000">payload</font></div>- If the input is a JSON string it tries to parse it to a JavaScript object.- If the input is a JavaScript object it creates a JSON string. The string can optionally be well-formatted.<div><font color="#FF0000">schemaError</font></div>If JSON schema validation fails, the catch node will have a ```schemaError``` property containing an array of errors.<p>By default, the node operates on <code>msg.payload</code>, but can be configured to any message property.</p><p>The node can also be configured to ensure a particular encoding instead of toggling between the two. This can be used, for example, with the <code>Http In</code> node to ensure the payload is a parsed object even if an incoming request did not set its content-type correctly for the HTTP In node to do the conversion.</p><p>If the node is configured to ensure the property is encoded as a String and it receives a String, no further checks will be made of the property. It will not check the String is valid JSON nor will it reformat it if the format option is selected.</p><p><em>Usage examples:</em></p>]]></content>
      
      
      
        <tags>
            
            <tag> Node-RED </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Node-RED 系列（3）-- Core nodes (Inject/Debug/Function)</title>
      <link href="/2020/04/29/Node-RED/Node-RED-3-Core-Nodes-1/"/>
      <url>/2020/04/29/Node-RED/Node-RED-3-Core-Nodes-1/</url>
      
        <content type="html"><![CDATA[<p>The inject, debug and function node are the most commonly used of the Node-RED core nodes.<br>Core nodes are the ones that are part of the initial Node-RED install.</p><h2 id="Inject"><a href="#Inject" class="headerlink" title="Inject"></a>Inject</h2><blockquote><p>Injects a message into a flow either manually or at regular intervals. The message payload can be a variety of types, including strings, JavaScripts objects or the current time.</p><h5 id="Outputs"><a href="#Outputs" class="headerlink" title="Outputs"></a>Outputs</h5><p><em><code>payload</code></em><br>The configured payload of the message.<br><em><code>topic</code></em><br>An optional property that can be configured in the node.<br>#####Details<br>The Inject node can initiate a flow with a specific payload value. The default payload is a timestamp of the current time in millisecs since January 1st, 1970.</p><p>The node also supports injecting strings, numbers, booleans, JavaScript objects, or flow/global context values.</p><p>By default, the node is triggered manually by clicking on its button within the editor. It can also be set to inject at regular intervals or according to a schedule.</p><p>It can also be configured to inject once each time the flows are started.</p><p>The <em>maximum Interval</em> that can be specified is about 596 hours/ 24days. However if you are looking at intervals greater than one day you should consider using a scheduler node that can cope with power outages and restarts.<br><strong>Note</strong>: The <em>“Interval between times”</em> and <em>“at a specific time”</em> options use the standard cron system. This means that 20 minutes will be at the next hour, 20 minutes past and 40 minutes past - not in 20 minutes time. If you want every 20 minutes from now - use the <em>“interval”</em> option.<br><img src="/2020/04/29/Node-RED/Node-RED-3-Core-Nodes-1/inject-node.png" alt="Inject node"></p><p><img src="/2020/04/29/Node-RED/Node-RED-3-Core-Nodes-1/inject-sample.png" alt="image.png"></p><ul><li><ol><li>trigger the inject manually</li></ol></li><li><ol start="2"><li>debug messages</li></ol></li><li><ol start="3"><li>topic - display the topic info</li></ol></li><li><ol start="4"><li>payload - display the payload info</li></ol></li></ul></blockquote><h2 id="Debug"><a href="#Debug" class="headerlink" title="Debug"></a>Debug</h2><blockquote><p>Displays selected message properties in the debug sidebar tab and optionally the runtime log. By default it displays <code>msg.payload</code>, but can be configured to display any property, the full message or the result of a JSONData expression.</p><h5 id="Details"><a href="#Details" class="headerlink" title="Details"></a>Details</h5><p>The debug sidebar provides a structured view of the messages it is sent, making it easier to understand their structure.<br>JavaScript objects and arrays can be collapsed and expanded as required. Buffer objects can be displayed as raw data or as a string if possible.</p><p>Alongside each message, the debug sidebar includes information about the time the message was received, the node that sent it and the type of the message. Clicking on the source node id will reveal that node within the workspace.</p><p>The button on the node can be used to enable or disable its output. It is recommended to disable or remove any Debug nodes that are not being used.</p><p>The node can also be configured to send all messages to the runtime log, or to send short (32 characters) to the status text under the debug node.<br><img src="/2020/04/29/Node-RED/Node-RED-3-Core-Nodes-1/debug-node.png" alt="Debug node"></p></blockquote><h2 id="Function"><a href="#Function" class="headerlink" title="Function"></a>Function</h2><blockquote><p>A JavaScript function to run against the messages being received by the node.</p><p>The messages are passed in as a JavaScript object called <code>msg</code>.</p><p>By convention it will have a <code>msg.payload</code> property containing the body of the message.</p><p>The function is expected to return a message object (or multiple message objects), but can choose to return nothing in order to halt a flow.</p><p>The <strong>Setup</strong> tab contains code that will be run whenever the node is started. The <strong>Close</strong> tab contains node that will be run whenever the node is stopped.</p><p>If an promise object is returned from the setup node, input message processing starts after its completion.</p><h5 id="Details-1"><a href="#Details-1" class="headerlink" title="Details"></a>Details</h5><p>See the online documentation for more information on writing functions.<br>Sending messages<br>The function can either return the messages it wants to pass on to the next nodes in the flow, or can call <code>node.send(messages)</code>.<br>It can return/send:</p><ul><li>a single message object - passed to nodes connected to the first output</li><li>an array of message objects - passed to nodes connected to the corresponding outputs</li></ul><p>Note: The setup code is executed during the initialization of nodes. Therefore, if <code>node.send</code> is called in the setup tab, subsequent nodes may not be able to receive the message.<br>If any element of the array is itself an array of messages, multiple messages are sent to the corresponding output.<br>If null is returned, either by itself or as an element of the array, no message is passed on.</p><h6 id="Logging-and-Error-Handling"><a href="#Logging-and-Error-Handling" class="headerlink" title="Logging and Error Handling"></a>Logging and Error Handling</h6><p>To log any information, or report an error, the following functions are available:</p><ul><li><code>node.log("Log message")</code></li><li><code>node.warn("Warning")</code></li><li><code>node.error("Error")</code></li></ul><p>The Catch node can also be used to handle errors. To invoke a Catch node, pass <code>msg</code> as a second argument to <code>node.error</code>.</p><pre class="line-numbers language-none"><code class="language-none">&gt;node.error("Error",msg);<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>Accessing Node Information<br>In the function block, id and name of the node can be referenced using the following properties:</p><ul><li><code>node.id</code> - id of the node</li><li><code>node.name</code> - name of the node</li></ul><p>Using environment variables<br>Environment variables can be accessed using <code>env.get("MY_ENV_VAR")</code></p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> Node-RED </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Node-RED 系列（2）-- Creating your first flow</title>
      <link href="/2020/04/29/Node-RED/Node-RED-2-Creating-your-first-flow/"/>
      <url>/2020/04/29/Node-RED/Node-RED-2-Creating-your-first-flow/</url>
      
        <content type="html"><![CDATA[<h2 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h2><p>This tutorial introduces the Node-RED editor and creates a flow that demonstrates the Inject, Debug and Function nodes.</p><h2 id="Access-the-editor"><a href="#Access-the-editor" class="headerlink" title="Access the editor"></a>Access the editor</h2><p>With the Node-RED  <font color="#FF0000">running</font> , open the editor in a web browser.<br>If you are using a browser on the same computer that is running Node-RED, you can access it with the url:  <a href="http://localhost:1880/">http://localhost:1880</a>.</p><p>If you are using a browser on another computer, you will need to use the ip address of the computer running Node-RED: http://<ip-address>:1880</ip-address></p><p><font color="#FF0000">Note:</font> please add Inbound rules  if necessary<br><img src="/2020/04/29/Node-RED/Node-RED-2-Creating-your-first-flow/node-red-editor.png" alt="Node-RED editor"></p><h2 id="Add-an-Inject-node"><a href="#Add-an-Inject-node" class="headerlink" title="Add an Inject node"></a>Add an Inject node</h2><p>The Inject node allows you to inject messages into a flow, either by clicking the button on the node or setting a time interval between injects.<br>Drag one onto the <font color="#FF0000">workspace</font> from the <font color="#FF0000">palette</font>.<br>Select the newly added Inject node to see information about its properties and a description of what it does in the <font color="#FF0000">information sidebar pane</font> </p><h2 id="Add-a-Debug-node"><a href="#Add-a-Debug-node" class="headerlink" title="Add a Debug node"></a>Add a Debug node</h2><p>The Debug node causes any message to be displayed in the <font color="#FF0000">Debug sidebar</font>. By default, it just displays the payload of the message, but it is possible to display the entire message object.</p><h2 id="Wire-the-two-node-together"><a href="#Wire-the-two-node-together" class="headerlink" title="Wire the two node together"></a>Wire the two node together</h2><p>Connect the Inject and Debug nodes together by <font color="#FF0000">dragging</font> between the output port of one to the input port of the other.</p><h2 id="Deploy"><a href="#Deploy" class="headerlink" title="Deploy"></a>Deploy</h2><p>At this point, the nodes only exist in the editor and must be deployed to the server.</p><p>With the Debug sidebar tab selected, click the Inject button. You should see numbers appear in the sidebar. By default, the inject node use the number of milliseconds since January 1st 1970 as its payload.</p><h2 id="Add-a-Function-node"><a href="#Add-a-Function-node" class="headerlink" title="Add a Function node"></a>Add a Function node</h2><p>The Function node allows you to pass each message though a JavaScript function.<br>Delete the existing wire (select it and press the delete on the keyboard).<br>Wire a Function node in between the Inject and Debug nodes.<br>Double-click on the Function node to bring up the editor dialog. Copy the following code into the function field:</p><pre class="line-numbers language-none"><code class="language-none">// Create a Date object from the payloadvar date = new Date(msg.payload);// Change the payload to be a formatted Date stringmsg.payload = date.toString();// Return the message so it can be sent onreturn msg;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>click Done to close the edit dialog and then click the deploy button.<br>Now when you click the Inject button, the messages in the sidebar will now be formatted is readable timestamps.</p><hr><h2 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h2><p>This flow demonstrates the basic concept of creating a flow. It shows how the Inject node can be used to manually trigger a flow, and how the Debug node displays the messages in the sidebar. It also shows how the Function node can be used to write custom JavaScript to run against messages.</p><h2 id="Source"><a href="#Source" class="headerlink" title="Source"></a>Source</h2><p>The flow created in the tutorial represented by the following json. To import it into the editor, copy it to your clipboard and then paste it into the Import dialog.</p>]]></content>
      
      
      
        <tags>
            
            <tag> Node-RED </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Node-RED 系列(1)-Install</title>
      <link href="/2020/04/28/Node-RED/Node-RED-1-Install/"/>
      <url>/2020/04/28/Node-RED/Node-RED-1-Install/</url>
      
        <content type="html"><![CDATA[<p>Premises: Nodejs</p><h2 id="Steps-to-install-Node-js"><a href="#Steps-to-install-Node-js" class="headerlink" title="Steps to install Node.js"></a>Steps to install Node.js</h2><ol><li><p>Download install from the <a href="https://nodejs.org/en/">Node.js</a> web site. LTS is recommended. </p></li><li><p>Run the installer you downloaded</p></li><li><p>Follow the prompts in the installer</p><ul><li>Accept the license agreement</li><li>click the NEXT button a bunch of times and accept the default installation settings<br><img src="/2020/04/28/Node-RED/Node-RED-1-Install/nodejs-install.png" alt="Node-RED Install"></li></ul><p> <em><strong>Information</strong></em><br> <em>Restart your computer. You won’t be able to run Node.js until you restart your computer.</em></p></li><li><p>Test it !</p><ul><li>Make sure you have Node installed by running simple commands to see what version is installed:</li><li>Test Node. To see if Node is installed, open the Windows Command Prompt, Powershell or a similar command line tool, and type&nbsp;<code>node --version &amp;&amp; npm --version</code>.&nbsp;This should print the version number so you should receive back output that looks similar to:</li></ul></li></ol><p><img src="/2020/04/28/Node-RED/Node-RED-1-Install/node-version-check.png" alt="node-version-check"></p><h2 id="Steps-to-install-Node-RED"><a href="#Steps-to-install-Node-RED" class="headerlink" title="Steps to install Node-RED"></a>Steps to install Node-RED</h2><p>This chapter gives specific instructions on setting up Node-RED in a Microsoft Windows environment. The instructions are specific to Windows 10 but should also work for windows7 and Windows Server from 2008R2.<br>It is not advisable to use versions prior to Windows 7 or Windows Server 2008R2</p><p><em><strong>Information</strong></em><br><em>Firstly set registry or proxy to use npm to download and install packages</em></p><ol><li><p>Install Node-RED</p><ul><li>Installing Node-RED as a global module adds the command node-red to your system path.</li><li>Execute the following at the command prompt:  <pre class="line-numbers language-none"><code class="language-none">npm install –g –unsafe-perm node-red<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul></li><li><p>Run Node-RED</p><ul><li>Once installed, the simple way to run Node-RED is to use the node-red command in a command prompt: if you have installed Node-RED as a global npm package, you can use the node-red command:  <pre class="line-numbers language-none"><code class="language-none">node-red<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul></li><li><p>Open browser, input localhost:1880 to go to the Node-Red flow page<br><img src="/2020/04/28/Node-RED/Node-RED-1-Install/node-red-flow.png" alt="node-red-flow"></p></li><li><p>Open browser, input localhost:1880/ui to go the Node-Red Dashboard page<br><img src="/2020/04/28/Node-RED/Node-RED-1-Install/node-red-ui.png" alt="node-red-ui"></p></li></ol><p><em><strong>Information</strong></em><br><em>You must keep the terminal open in order to keep Node-RED running. And if you want to always keep Node-Red running, using PM2</em><br><em><a href="">Node-RED 系列（8）– Using PM2 to keep Node-RED running on Windows</a></em></p>]]></content>
      
      
      
        <tags>
            
            <tag> Node-RED </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Node-RED 系列</title>
      <link href="/2020/04/28/Node-RED/Node-RED-0-Overview/"/>
      <url>/2020/04/28/Node-RED/Node-RED-0-Overview/</url>
      
        <content type="html"><![CDATA[<p>Node-RED系列文章通过循序渐进的方式讲解一下Node-RED的初级使用到一些高级的功能。<br>本系列文章都收集在我自己的Node-RED专集中，暂定的目录也可能会更改，所以如果有需要的话可以关注一下Node-RED专集。</p><p><em>因为本人在外企工作，为了锻炼英文书写能力，故而后续的文章内容基本上都是英文书写。如果因为我超烂的英文水平而不明白的地方，可以留言，我会及时回复。抱歉哈~</em></p><p>####目录列表</p><ul><li>Node-RED 系列</li><li><a href="https://paria7.github.io/2020/04/28/Node-RED/Node-RED-1-Install/">Node-RED 系列（1）– Install</a></li><li><a href="https://www.jianshu.com/p/aeeaac4ae638">Node-RED 系列（2）– Creating your first flow</a></li><li><a href="https://www.jianshu.com/p/273ac8574fb2">Node-RED 系列（3）– Core nodes (Inject/Debug/Function)</a></li><li><a href="https://www.jianshu.com/p/67f3d46c7b96">Node-RED 系列（4）– Core nodes (Change/Switch/Json)</a></li><li>Node-RED 系列（5）– Core nodes (Template/Split/Join)</li><li>Node-RED 系列（6）– Core nodes (Http In/Http Request)</li><li><a href="https://www.jianshu.com/p/e549ea7a7b6b">Node-RED 系列（7）– Oauth/OpenID based authentication with Id4</a></li><li><a href="https://www.jianshu.com/p/b1d23ee82296">Node-RED 系列（8）– Using PM2 to keep Node-RED running on Windows</a></li><li>Node-RED 系列（9）– Subflows</li><li>Node-RED 系列 （10）– how to copy nodes and flows</li><li>Node-RED 系列（11）– CSV Node</li><li>Node-RED 系列（12）– How to read and write data to a file</li><li>Node-RED 系列（13）– Global Variables</li><li>Node-RED 系列（14）– Invoke API &amp; export to API</li><li>Node-RED 系列（15）– Receive data from Kafka</li><li>Node-RED 系列（16）– Send data to RabbitMQ</li><li>Node-RED 系列（17）– Store data to database</li><li>…</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> Node-RED </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
